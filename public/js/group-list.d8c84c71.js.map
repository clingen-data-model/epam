{"version":3,"file":"js/group-list.d8c84c71.js","mappings":"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","sources":["webpack://epam/./src/forms/form_factory.js","webpack://epam/./src/components/groups/GroupForm.vue","webpack://epam/./src/components/groups/GroupForm.vue?fb8f","webpack://epam/./src/views/groups/GroupList.vue","webpack://epam/./src/views/groups/GroupList.vue?951c"],"sourcesContent":["import {ref} from 'vue'\nimport is_validation_error from '@/http/is_validation_error'\nimport api from '@/http/api'\n\nexport const errors = ref({});\nconst editing = ref(false);\nconst hideForm = () => {\n    editing.value = false;\n    errors.value = {};\n}\nexport const submitFormData = async ({method, url, data}) => {\n    try {\n        // return await api.put(\n        return await api({\n            method,\n            url, \n            data\n        }).then(response => response.data.data)\n    } catch (error) {\n        if (is_validation_error(error)) {\n            errors.value = {...errors, ...error.response.data.errors}\n        }\n    }\n}\n\nexport const resetErrors = () => {\n    errors.value = {};\n}\n\nexport default () => {\n    return {\n        errors,\n        editing,\n        hideForm,\n        submitFormData,\n        resetErrors,\n    }\n}","<template>\n    <div>\n        <input-row\n            v-if=\"canSetType\"\n            v-model=\"group.group_type_id\"\n            :errors=\"errors.group_type_id\"\n            type=\"select\"\n            :options=\"typeOptions\"\n            label=\"Type\"\n        />\n\n        <dictionary-row label=\"Type\" v-else>\n            {{ this.group?.type?.display_name }}\n        </dictionary-row>\n\n        <transition name=\"slide-fade-down\" mode=\"out-in\">\n            <div v-if=\"group.group_type_id > 2 && group.expert_panel\">\n                <input-row\n                    label=\"Long Base Name\"\n                    v-model=\"group.expert_panel.long_base_name\"\n                    @update:modelValue=\"emitUpdate\"\n                    placeholder=\"Long base name\"\n                    :errors=\"errors.long_base_name\"\n                    input-class=\"w-full\"\n                />\n                <input-row\n                    label=\"Short Base Name\"\n                    v-model=\"group.expert_panel.short_base_name\"\n                    @update:modelValue=\"emitUpdate\"\n                    placeholder=\"Short base name\"\n                    :errors=\"errors.short_base_name\"\n                    input-class=\"w-full\"\n                />\n                <div v-if=\"hasAnyPermission(['groups-manage'])\">\n                    <input-row\n                        label=\"Affiliation ID\"\n                        v-model=\"group.expert_panel.affiliation_id\"\n                        :placeholder=\"affiliationIdPlaceholder\"\n                        :errors=\"errors.affiliation_id\"\n                        input-class=\"w-full\"\n                        @update:modelValue=\"emitUpdate\"\n                    >\n                        <template v-slot:label>\n                            Affiliation ID\n                            <note>admin-only</note>\n                        </template>\n                    </input-row>\n                </div>\n                <dictionary-row label=\"Affiliation ID\" v-else>\n                    <span v-if=\"group.expert_panel.affiliation_id\">{{group.expert_panel.affiliation_id}}</span>\n                    <span v-else class=\"text-gray-400\">{{'Not yet assigend'}}</span>\n                </dictionary-row>\n            </div>\n            <div v-else>\n                <input-row\n                    v-model=\"group.name\"\n                    placeholder=\"Name\"\n                    label=\"Name\"\n                    input-class=\"w-full\"\n                    :errors=\"errors.name\"\n                    @update:modelValue=\"emitUpdate\"\n                />\n            </div>\n        </transition>\n        <div v-if=\"hasPermission('groups-manage')\">\n            <input-row\n                v-model=\"group.group_status_id\"\n                type=\"select\"\n                :options=\"statusOptions\"\n                :errors=\"errors.group_status_id\"\n                @update:modelValue=\"emitUpdate\"\n            >\n                <template v-slot:label>\n                    Status:\n                    <note>admin-only</note>\n                </template>\n            </input-row>\n\n            <input-row\n                v-model=\"group.parent_id\"\n                type=\"select\"\n                :options=\"parentOptions\"\n                :errors=\"errors.parent_id\"\n                @update:modelValue=\"emitUpdate\"\n            >\n                <template v-slot:label>\n                    Parent group:\n                    <note>admin-only</note>\n                </template>\n            </input-row>\n        </div>\n    </div>\n</template>\n<script>\nimport {sortBy} from 'lodash'\nimport {isValidationError} from '@/http'\nimport {api} from '@/http'\nimport Group from '@/domain/group'\nimport configs from '@/configs'\nimport formFactory from '@/forms/form_factory'\n\nexport default {\n    name: 'GroupForm',\n    emits: [\n        'canceled',\n        'saved',\n        'update'\n    ],\n    data() {\n        return {\n            groupTypes: configs.groups.types,\n            groupStatuses: configs.groups.statuses,\n            newGroup: new Group(),\n            parents: []\n        }\n    },\n    computed: {\n        group: {\n            get() {\n                const group = this.$store.getters['groups/currentItem'];\n                if (group) {\n                    return group;\n                }\n                return this.newGroup;\n            },\n            set (value) {\n                try {\n                    this.$store.commit(\"groups/addItem\", value);\n                } catch (e) {\n                    this.newGroup = value;\n                }\n            }\n        },\n        statusOptions () {\n            return Object.values(this.groupStatuses).map(status => ({value: status.id, label: this.titleCase(status.name)}))\n        },\n        typeOptions () {\n            return Object.values(this.groupTypes).map(type => ({value: type.id, label: type.display_name}));\n        },\n        canSetType() {\n            return this.hasPermission('groups-manage') && !this.group.id\n        },\n        affiliationIdPlaceholder () {\n            return 50000\n        },\n        cdwgs () {\n            return this.$store.getters['cdwgs/all']\n        },\n        namesDirty () {\n            return this.group.expert_panel.isDirty('long_base_name')\n                || this.group.expert_panel.isDirty('short_base_name');\n        },\n        affiliationIdDirty () {\n            return this.group.expert_panel.isDirty('affiliation_id');\n        },\n        parentOptions () {\n            const options = [{value: 0, label: 'None'}];\n            this.parents\n                .filter(group => group.type.can_be_parent)\n                .forEach(parent => {\n                    options.push({value: parent.id, label: parent.displayName})\n                })\n\n            return sortBy(options, 'label');\n        }\n    },\n    methods: {\n        async save() {\n            this.resetErrors();\n            try {\n                if (this.group.id) {\n                    await this.updateGroup();\n                    this.$emit('saved');\n\n                    // this.$store.dispatch('groups/find', this.group.uuid);\n                    // this.$store.commit('pushSuccess', 'Group info updated.');\n                    return;\n                }\n\n                const newGroup = await this.createGroup()\n                                    .then(response => response.data.data);\n                this.$emit('saved');\n                this.$store.commit('pushSuccess', 'Group created.');\n                this.$router.push({name: 'AddMember', params: {uuid: newGroup.uuid}});\n            } catch (error) {\n                if (isValidationError(error)) {\n                    this.errors = error.response.data.errors;\n                }\n                throw error;\n            }\n        },\n        createGroup () {\n            let {\n                name,\n                parent_id,\n                group_type_id,\n                group_status_id\n            } = this.group.attributes;\n\n            const {short_base_name} = this.group.expert_panel;\n\n            if (name === null && this.group.expert_panel) {\n                name = this.group.expert_panel.long_base_name;\n            }\n\n            return this.$store.dispatch(\n                'groups/create',\n                {\n                    name,\n                    parent_id,\n                    group_type_id,\n                    group_status_id,\n                    short_base_name\n                }\n            );\n        },\n        updateGroup () {\n            const promises = [];\n            promises.push(this.saveGroupData());\n            if (this.group.expert_panel) {\n                promises.push(this.saveEpData());\n            }\n\n            return Promise.all(promises);\n        },\n        saveGroupData () {\n            const promises = [];\n            if (this.group.isDirty('parent_id')) {\n                promises.push(this.saveParent());\n            }\n\n            if (this.group.isDirty('name')) {\n                promises.push(this.saveName())\n            }\n\n            if (this.group.isDirty('group_status_id')) {\n                promises.push(this.saveStatus())\n            }\n\n            return Promise.all(promises);\n        },\n        async saveEpData() {\n            const promises = []\n            if (this.namesDirty) {\n                const {long_base_name, short_base_name} = this.group.expert_panel;\n                promises.push(this.submitFormData({\n                    method: 'put',\n                    url: `/api/groups/${this.group.uuid}/expert-panel/name`,\n                    data: { long_base_name, short_base_name }\n                }));\n            }\n\n            if (this.affiliationIdDirty) {\n                promises.push(this.submitFormData({\n                    method: 'put',\n                    url: `/api/groups/${this.group.uuid}/expert-panel/affiliation-id`,\n                    data: { affiliation_id: this.group.expert_panel.affiliation_id }\n                }));\n            }\n\n            return await Promise.all(promises);\n        },\n\n        isDirty (attribute) {\n            return this.group[attribute] != this.group[attribute]\n        },\n\n        saveParent () {\n            return this.submitFormData({\n                method: 'put',\n                url: `/api/groups/${this.group.uuid}/parent`,\n                data: { parent_id: this.group.parent_id }\n            })\n        },\n        saveName () {\n            return this.submitFormData({\n                method: 'put',\n                url: `/api/groups/${this.group.uuid}/name`,\n                data: {name: this.group.name}\n            })\n        },\n        saveStatus () {\n            return this.submitFormData({\n                method: 'put',\n                url: `/api/groups/${this.group.uuid}/status`,\n                data: {status_id: this.group.group_status_id}\n            })\n        },\n        resetData () {\n            if (this.group.uuid) {\n                this.$store.dispatch('groups/find', this.group.uuid);\n            }\n        },\n        cancel() {\n            if (this.group.uuid) {\n                this.resetData();\n            }\n            this.$emit('canceled');\n        },\n        async getParentOptions () {\n            const params = {\n                'where[group_type_id]': [1,2],\n                without: ['coordinators', 'expertPanel']\n            };\n\n            this.parents = await api.get(`/api/groups`, {params})\n                        .then(response => {\n                            return response.data\n                                .filter(group => group.id != this.group.id)\n                                .map(g => new Group(g))\n                        });\n        },\n        emitUpdate () {\n            this.$emit('update');\n        }\n    },\n    beforeMount() {\n        this.getParentOptions();\n        this.$store.dispatch('cdwgs/getAll');\n    },\n    setup (props, context) {\n        const {errors, submitFormData, resetErrors} = formFactory(props, context)\n\n        return {\n            errors,\n            submitFormData,\n            resetErrors\n        }\n    }\n}\n</script>\n","import { render } from \"./GroupForm.vue?vue&type=template&id=410c5d76\"\nimport script from \"./GroupForm.vue?vue&type=script&lang=js\"\nexport * from \"./GroupForm.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/home/bpow/src/clingen/gpm/resources/app/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n    <div>\n        <h1 class=\"flex justify-between items-center\">\n            Groups\n            <button v-if=\"hasPermission('groups-manage')\" class=\"btn btn-xs\" @click=\"startCreateGroup\">Create a group</button>\n        </h1>\n        <tabs-container @tab-changed=\"getGroupsForType\">\n            <tab-item v-for=\"def in tabDefinitions\" :label=\"def.label\" :key=\"def.label\">\n                <div class=\"text-center w-full\" v-if=\"loading\">Loading...</div>\n                <div v-else>\n                    <div class=\"mb-2\">\n                        Filter: <input type=\"text\" v-model=\"filterString\" placeholder=\"name,id,status,coordinator name\">\n                    </div>\n                    <data-table\n\n                        :data=\"filteredGroups.filter(def.filter)\"\n                        :fields=\"fields\"\n                        v-model:sort=\"sort\"\n                        :row-click-handler=\"goToGroup\"\n                        v-remaining-height\n                        row-class=\"cursor-pointer active:bg-blue-100\"\n                    >\n                        <template v-slot:cell-displayStatus=\"{item}\">\n                            <badge class=\"text-xs\" :color=\"item.statusColor\">\n                                {{ item.displayStatus\n                                }}<span v-if=\"item.status.id == 1 && item.is_ep\"\n                                    >&nbsp;-&nbsp;{{\n                                        item.expert_panel.currentStepAbbr\n                                    }}</span\n                                >\n                            </badge>\n                        </template>\n                        <template v-slot:cell-coordinators=\"{value}\">\n                            <div v-if=\"value.length == 0\"></div>\n                            <span v-for=\"(coordinator, idx) in value\" :key=\"coordinator.id\">\n                                <span v-if=\"idx > 0\">, </span>\n                                <router-link\n                                    :to=\"{name: 'PersonDetail', params: {uuid: coordinator.person.uuid}}\"\n                                    class=\"link\"\n                                    @click.stop\n                                >\n                                    {{coordinator.person.name}}\n                                </router-link>\n                            </span>\n                        </template>\n                    </data-table>\n                </div>\n            </tab-item>\n        </tabs-container>\n\n        <modal-dialog v-model=\"showCreateForm\" title=\"Create a New Group\" size=\"sm\">\n            <submission-wrapper @submitted=\"$refs.groupForm.save()\" @canceled=\"$refs.groupForm.cancel()\">\n                <group-form ref='groupForm' @canceled=\"showCreateForm=false\" @saved=\"showCreateForm = false\" />\n            </submission-wrapper>\n        </modal-dialog>\n    </div>\n</template>\n<script>\nimport {useStore} from 'vuex'\nimport {useRouter} from 'vue-router'\nimport {computed, ref} from 'vue'\nimport GroupForm from '@/components/groups/GroupForm.vue'\nimport SubmissionWrapper from '@/components/groups/SubmissionWrapper.vue'\n\nexport default {\n    name: 'ComponentName',\n    components: {\n        GroupForm,\n        SubmissionWrapper\n    },\n    props: {\n\n    },\n    data() {\n        return {\n            loading: false,\n            showCreateForm: false,\n            loadedFor: {\n                'VCEPs': false,\n                'GCEPs': false,\n                'CDWGs': false,\n                'WGs': false,\n            },\n            sort: {\n                field: 'id',\n                desc: false\n            },\n            fields: [\n                {\n                    name: 'id',\n                    label: 'ID',\n                    sortable: true\n                },\n                {\n                    name: 'name',\n                    label: 'Name',\n                    sortable: true,\n                    resolveValue: (item) => {\n                        return item.displayName\n                    }\n                },\n                {\n                    name: 'coordinators',\n                    sortable: false\n                },\n                {\n                    name: 'displayStatus',\n                    sortable: true,\n                    label: 'status'\n                },\n            ]\n        }\n    },\n    methods: {\n        startCreateGroup () {\n            this.showCreateForm = true;\n        },\n        async getGroupsForType (tabLabel) {\n            const typeTab = this.tabDefinitions.find(t => t.label === tabLabel);\n            if (this.loadedFor[tabLabel]) {\n                return;\n            }\n            this.loading = true;\n            await this.$store.dispatch('groups/getItems', {where: {group_type_id: typeTab.typeId}});\n            this.loadedFor[tabLabel] = true;\n            this.loading = false;\n        }\n\n    },\n    setup() {\n        const store = useStore();\n        const router = useRouter();\n\n\n        const tabDefinitions = computed( () => {\n            const tabs = [\n                {\n                    label: 'VCEPs',\n                    typeId: 4,\n                    filter: (g) => g.is_vcep_or_scvcep,\n                },\n                {\n                    label: 'GCEPs',\n                    typeId: 3,\n                    filter: (g) => g.is_gcep,\n                },\n{\n                    label: 'CDWGs',\n                    typeId: 2,\n                    filter: g => g.isCdwg()\n                },\n                {\n                    label: 'WGs',\n                    typeId: 1,\n                    filter: g => g.isWg()\n                },\n            ];\n\n            return tabs;\n        })\n\n\n\n        const filterString = ref(null);\n\n        const groups = computed(() => store.getters['groups/all']);\n\n        const filteredGroups = computed(() => groups.value.filter(group => {\n            if (!filterString.value) {\n                return true;\n            }\n\n            const pattern = new RegExp(`.*${filterString.value}.*`, 'i');\n\n            return group.name && group.name.match(pattern)\n                || group.displayName && group.displayName.match(pattern)\n                || (\n                    group.expert_panel &&\n                    group.expert_panel.full_short_base_name &&\n                    group.expert_panel.full_short_base_name.match(pattern)\n                )\n                || group.id == filterString.value\n                || group.status.name.match(pattern)\n                || (\n                    group.expert_panel &&\n                    group.expert_panel.currentStepName &&\n                    group.expert_panel.currentStepName.match(pattern)\n                    )\n                || group.coordinators.filter(c => c.person.name.match(pattern)).length > 0\n        }))\n\n        const goToItem = (item) => {\n            router.push({\n                name: 'GroupDetail',\n                params: {uuid: item.uuid}\n            })\n        }\n\n        return {\n            filterString,\n            groups,\n            filteredGroups,\n            tabDefinitions,\n            goToItem,\n            goToGroup: goToItem,\n        }\n    }\n\n}\n</script>\n","import { render } from \"./GroupList.vue?vue&type=template&id=5fdd6be0\"\nimport script from \"./GroupList.vue?vue&type=script&lang=js\"\nexport * from \"./GroupList.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/home/bpow/src/clingen/gpm/resources/app/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["errors","ref","editing","hideForm","value","submitFormData","async","method","url","data","api","then","response","error","is_validation_error","resetErrors","class","_createElementBlock","$options","_createBlock","_component_input_row","group_type_id","$setup","type","options","label","_component_dictionary_row","group","display_name","_createVNode","_Transition","name","mode","expert_panel","long_base_name","placeholder","short_base_name","_ctx","affiliation_id","_component_note","_hoisted_6","group_status_id","parent_id","emits","groupTypes","configs","groups","types","groupStatuses","statuses","newGroup","Group","parents","computed","get","this","$store","getters","set","commit","e","statusOptions","Object","values","map","status","id","titleCase","typeOptions","canSetType","hasPermission","affiliationIdPlaceholder","cdwgs","namesDirty","isDirty","affiliationIdDirty","parentOptions","filter","can_be_parent","forEach","parent","push","displayName","sortBy","methods","save","updateGroup","$emit","createGroup","$router","params","uuid","isValidationError","attributes","dispatch","promises","saveGroupData","saveEpData","Promise","all","saveParent","saveName","saveStatus","attribute","status_id","resetData","cancel","getParentOptions","without","g","emitUpdate","beforeMount","setup","props","context","formFactory","__exports__","render","_createElementVNode","_hoisted_1","onClick","_component_tabs_container","onTabChanged","_Fragment","def","_component_tab_item","key","$data","_hoisted_3","_hoisted_5","_component_data_table","fields","sort","item","_component_badge","color","statusColor","displayStatus","is_ep","currentStepAbbr","length","coordinator","idx","_component_router_link","to","person","_component_modal_dialog","title","size","_component_submission_wrapper","onSubmitted","groupForm","onCanceled","_component_group_form","onSaved","components","GroupForm","SubmissionWrapper","loading","showCreateForm","loadedFor","field","desc","sortable","resolveValue","startCreateGroup","getGroupsForType","tabLabel","typeTab","tabDefinitions","find","t","where","typeId","store","useStore","router","useRouter","tabs","is_vcep_or_scvcep","is_gcep","isCdwg","isWg","filterString","filteredGroups","pattern","RegExp","match","full_short_base_name","currentStepName","coordinators","c","goToItem","goToGroup"],"sourceRoot":""}