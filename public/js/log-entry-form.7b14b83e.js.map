{"version":3,"sources":["webpack:///./src/components/log_entries/LogEntryForm.vue","webpack:///./src/components/log_entries/LogEntryForm.vue?ed08"],"names":["class","ref","$route","meta","title","label","newEntry","log_date","errors","type","application","ep_type_id","step","entry","cancel","save","name","components","StepInput","RichTextEditor","props","id","required","default","data","Date","editor","editorConfig","toolbar","computed","watch","immediate","handler","this","findEntry","syncEntry","methods","log_entries","find","i","initNewEntry","parse","created_at","properties","description","$emit","$store","dispatch","updatedEntry","logEntryData","response","status","mounted","$el","querySelectorAll","focus","render"],"mappings":"4IAEYA,MAAM,8B,kTADd,yBAWiB,GAXDA,MAAM,iBAAiBC,IAAI,kB,+BACvC,iBAAsE,CAAtE,yBAAsE,KAAtE,EAAsE,+BAAxBC,OAAOC,KAAKC,OAAK,GAC/D,yBAAwH,GAA7GC,MAAM,W,WAAoB,EAAAC,SAASC,S,qDAAT,EAAAD,SAASC,SAAQ,IAAGC,OAAQ,EAAAA,OAAOD,SAAUE,KAAK,OAAOR,IAAI,W,gCACZ,GAAtB,EAAAS,YAAYC,Y,yBAA5E,yBAA0G,G,iBAArF,EAAAL,SAASM,K,qDAAT,EAAAN,SAASM,KAAI,IAAGJ,OAAQ,EAAAA,OAAOI,M,wEACpD,yBAEY,GAFDP,MAAM,QAASG,OAAQ,EAAAA,OAAOK,O,+BACrC,iBAA8D,CAA9D,yBAA8D,G,WAAnC,EAAAP,SAASO,M,qDAAT,EAAAP,SAASO,MAAK,K,8CAE7C,yBAGa,Q,8BAFT,iBAAmD,CAAnD,yBAAmD,UAA3Cb,MAAM,MAAO,QAAK,8BAAE,EAAAc,QAAA,EAAAA,OAAA,sBAAQ,UACpC,yBAAoD,UAA5Cd,MAAM,WAAY,QAAK,8BAAE,EAAAe,MAAA,EAAAA,KAAA,sBAAM,Y,6JAYpC,GACXC,KAAM,eACNC,WAAY,CACRC,YAAA,KACAC,iBAAA,MAEJC,MAAO,CACHC,GAAI,CACAC,UAAU,EACVC,QAAS,OAGjBC,KAZW,WAaP,MAAO,CACHlB,SAAU,CACNC,SAAU,IAAIkB,KACdb,KAAM,KACNC,MAAO,MAEXL,OAAQ,GACRkB,OAAQ,IACRC,aAAc,CACVC,QAAS,CAAC,OAAQ,SAAU,IAAK,WAI7CC,SAAU,kBACH,eAAW,CACVnB,YAAa,8BAGrBoB,MAAO,CACHT,GAAI,CACAU,WAAW,EACXC,QAAS,WACL,IAAMnB,EAAQoB,KAAKC,YACfrB,GACAoB,KAAKE,UAAUtB,KAI3BH,YAAa,CACTqB,WAAW,EACXC,QAAS,WACL,IAAMnB,EAAQoB,KAAKC,YACfrB,GACAoB,KAAKE,UAAUtB,MAK/BuB,QAAS,CACLF,UADK,WACQ,WACT,OAAgB,OAAZD,KAAKZ,GACE,KAEPY,KAAKvB,YAAY2B,YACVJ,KAAKvB,YAAY2B,YAAYC,MAAK,SAAAC,GAAA,OAAKA,EAAElB,IAAM,EAAKA,WAD/D,GAIJmB,aATK,WAUDP,KAAK3B,SAAW,CACZC,SAAU,eAAW,IAAIkB,MACzBb,KAAM,KACNC,MAAO,KAGfsB,UAhBK,SAgBMtB,GACFA,IAGLoB,KAAK3B,SAAW,CACZe,GAAIR,EAAMQ,GACVd,SAAU,eAAW,IAAIkB,KAAKA,KAAKgB,MAAO5B,EAAM6B,cAChD9B,KAAMC,EAAM8B,WAAW/B,KACvBC,MAAOA,EAAM+B,eAGrB9B,OA3BK,WA4BDmB,KAAKO,eACLP,KAAKY,MAAM,aAET9B,KA/BD,WA+BQ,qKAED,EAAKT,SAASe,GAFb,gCAGK,EAAKyB,OAAOC,SACd,8BACA,CACIrC,YAAa,EAAKA,YAClBsC,aAAc,EAAK1C,WAP1B,6CAWK,EAAKwC,OAAOC,SAAS,2BAA4B,CAACrC,YAAa,EAAKA,YAAauC,aAAc,EAAK3C,WAXzG,OAaL,EAAKkC,eACL,EAAKK,MAAM,SAdN,yDAgBD,KAAMK,UAAqC,KAAzB,KAAMA,SAASC,SAAiB,KAAMD,SAAS1B,KAAKhB,OAhBrE,wBAiBD,EAAKA,OAAS,KAAM0C,SAAS1B,KAAKhB,OAjBjC,iFAuBjB4C,QAzGW,WA0GPnB,KAAKoB,IAAIC,iBAAiB,SAAS,GAAGC,UC7H9C,EAAOC,OAASA,EAED","file":"js/log-entry-form.7b14b83e.js","sourcesContent":["<template>\n    <form-container class=\"log-entry-form\" ref=\"form-container\">\n        <h4 class=\"pb-2 border-b my-2 text-xl\">{{this.$route.meta.title}}</h4>\n        <input-row label=\"Log Date\" v-model=\"newEntry.log_date\" :errors=\"errors.log_date\" type=\"date\" ref=\"logdate\"></input-row>\n        <step-input v-model=\"newEntry.step\" :errors=\"errors.step\" v-if=\"application.ep_type_id == 2\"></step-input>\n        <input-row label=\"Entry\" :errors=\"errors.entry\">\n            <rich-text-editor v-model=\"newEntry.entry\"></rich-text-editor>\n        </input-row>\n        <button-row>\n            <button class=\"btn\" @click=\"cancel\">Cancel</button>\n            <button class=\"btn blue\" @click=\"save\">Save</button>\n        </button-row>\n    </form-container>\n</template>\n<script>\nimport {mapGetters} from 'vuex'\nimport { formatDate } from '../../date_utils'\nimport StepInput from '../forms/StepInput'\nimport Editor from '@ckeditor/ckeditor5-build-classic'\nimport RichTextEditor from '../forms/RichTextEditor'\n\n\nexport default {\n    name: 'LogEntryForm',\n    components: {\n        StepInput,\n        RichTextEditor\n    },\n    props: {\n        id: {\n            required: false,\n            default: null\n        }\n    },\n    data() {\n        return {\n            newEntry: {\n                log_date: new Date(),\n                step: null,\n                entry: null\n            },\n            errors: {},\n            editor: Editor,\n            editorConfig: {\n                toolbar: ['bold', 'italic', '|', 'link']\n            }\n        }\n    },\n    computed: {\n        ...mapGetters({\n            application: 'applications/currentItem'\n        })\n    },\n    watch: {\n        id: {\n            immediate: true,\n            handler: function() {\n                const entry = this.findEntry();\n                if (entry) {\n                    this.syncEntry(entry)\n                }\n            }\n        },\n        application: {\n            immediate: true,\n            handler: function () {\n                const entry = this.findEntry();\n                if (entry) {\n                    this.syncEntry(entry);\n                }\n            }\n        }\n    },\n    methods: {\n        findEntry () {\n            if (this.id === null) {\n                return null;\n            }\n            if (this.application.log_entries) {\n                return this.application.log_entries.find(i => i.id == this.id);\n            }\n        },\n        initNewEntry () {\n            this.newEntry = {\n                log_date: formatDate(new Date),\n                step: null,\n                entry: ''\n            }\n        },\n        syncEntry (entry) {\n            if (!entry) {\n                return;\n            }\n            this.newEntry = {\n                id: entry.id,\n                log_date: formatDate(new Date(Date.parse((entry.created_at)))),\n                step: entry.properties.step,\n                entry: entry.description\n            }\n        },\n        cancel() {\n            this.initNewEntry();\n            this.$emit('canceled');\n        },\n        async save() {\n            try {\n                if (this.newEntry.id) {\n                    await this.$store.dispatch(\n                        'applications/updateLogEntry', \n                        {\n                            application: this.application, \n                            updatedEntry: this.newEntry,\n                        }\n                    );\n                } else {\n                    await this.$store.dispatch('applications/addLogEntry', {application: this.application, logEntryData: this.newEntry})\n                }\n                this.initNewEntry();\n                this.$emit('saved');\n            } catch (error) {\n                if (error.response && error.response.status == 422 && error.response.data.errors) {\n                    this.errors = error.response.data.errors\n                    return;\n                }\n            }\n        },\n    },\n    mounted() {\n        this.$el.querySelectorAll('input')[0].focus();\n    }\n}\n</script>","import { render } from \"./LogEntryForm.vue?vue&type=template&id=0e8848b0\"\nimport script from \"./LogEntryForm.vue?vue&type=script&lang=js\"\nexport * from \"./LogEntryForm.vue?vue&type=script&lang=js\"\nscript.render = render\n\nexport default script"],"sourceRoot":""}