{"version":3,"file":"js/105.c3ced73c.js","mappings":"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","sources":["webpack://epam/./src/composables/comment_manager.js","webpack://epam/./src/repositories/base_repository.js","webpack://epam/./src/repositories/comment_repository.js","webpack://epam/./src/components/expert_panels/ReviewMembership.vue","webpack://epam/./src/components/expert_panels/ReviewMembership.vue?a42d","webpack://epam/./src/components/expert_panels/DefinitionReview.vue","webpack://epam/./src/components/expert_panels/DefinitionReview.vue?c6b1","webpack://epam/./src/forms/base_entity_form.js","webpack://epam/./src/repositories/comment_type_repository.js","webpack://epam/./src/forms/comment_form.js","webpack://epam/./src/components/expert_panels/ReviewCommentForm.vue","webpack://epam/./src/components/expert_panels/ReviewCommentForm.vue?1f84","webpack://epam/./src/components/expert_panels/ReviewComment.vue","webpack://epam/./src/components/expert_panels/ReviewComment.vue?cf11","webpack://epam/./src/components/expert_panels/ReviewSection.vue","webpack://epam/./src/components/expert_panels/ReviewSection.vue?09ef","webpack://epam/./src/components/expert_panels/SustainedCurationReview.vue","webpack://epam/./src/components/expert_panels/SustainedCurationReview.vue?406d"],"sourcesContent":["import {ref, computed} from 'vue'\nimport commentRepository from '../repositories/comment_repository';\n\nconst types = {\n    internal: 1,\n    suggestion: 2,\n    requirement: 3\n};\n\nexport default (subjectType, subjectId) => {\n    const comments = ref([]);\n\n    const openComments = computed(() => comments.value.filter(c => !c.is_resolved))\n    const openRequirements = computed(() => openComments.value.filter(c =>  c.comment_type_id == types.requirement));\n    const openSuggestions = computed(() => openComments.value.filter(c =>  c.comment_type_id == types.suggestion));\n    const commentsForEp = computed(() => [...openRequirements.value, ...openSuggestions.value])\n    const openInternal = computed(() => openComments.value.filter(c => c.comment_type_id == types.internal));\n\n    const findCommentIndex = (comment) => {\n        return comments.value.findIndex(c => c.id == comment.id)\n    }\n\n    const getComments = async () => {\n        comments.value = await commentRepository.query({where: {\n            subject_type: subjectType,\n            subject_id: subjectId\n        }})\n    }\n\n    const addComment = (comment) => comments.value.push(comment);\n    const removeComment = (comment) => comments.value.splice(findCommentIndex(comment), 1);\n    const updateComment = (comment) => comments.value[findCommentIndex(comment)] = comment;\n\n    return {\n        subject: {\n            type: subjectType,\n            id: subjectId\n        },\n        comments,\n        openComments,\n        openRequirements,\n        openSuggestions,\n        openInternal,\n        getComments,\n        addComment,\n        removeComment,\n        updateComment,\n        commentsForEp\n    }\n}\n","import { api, queryStringFromParams } from '@/http'\n\nexport default class BaseRepository {\n    constructor (baseUrl, options = {}) {\n        this.baseUrl = baseUrl\n        this.options = options\n    }\n\n    query (params) {\n        const queryString = queryStringFromParams(params)\n        return api.get(this.baseUrl+queryString).then(response =>  this.transformToEntity(response.data))\n    }\n\n    find (id) {\n        return api.get(`${this.baseUrl}/${id}`).then(response => this.transformToEntity(response.data))\n    }\n\n     save (data) {\n        return api.post(this.baseUrl, data).then(response => this.transformToEntity(response.data))\n    }\n    \n     update (data) {\n        return api.put(`${this.baseUrl}/${data.id}`, data).then(response => this.transformToEntity(response.data))\n    }\n    \n     destroy (item) {\n        return api.delete(`${this.baseUrl}/${item.id}`)\n    }\n\n    transformToEntity(item) {\n        if (!this.options.entityClass) {\n            return item;\n        }\n\n        if (Array.isArray(item)) {\n            return item.map(i => new this.options.entityClass(i))\n        }\n        return item;\n    }\n}","import BaseRepository from './base_repository.js'\nimport {api} from '@/http'\n\n\nconst commentRepository = (new BaseRepository('/api/comments'));\ncommentRepository.resolve = (id) => {\n    return api.post(`/api/comments/${id}/resolved`)\n            .then(response => response.data);\n}\ncommentRepository.unresolve = (id) => {\n    return api.post(`/api/comments/${id}/unresolved`)\n            .then(response => response.data);\n}\n\nexport {commentRepository};\n\nexport default commentRepository;\n","<script setup>\n    import { computed, ref } from 'vue'\n    import CredentialsView from '../people/CredentialsView.vue';\n    import ExpertisesView from '../people/ExpertisesView.vue';\n\n    const props = defineProps({\n        members: {\n            required: true,\n            type: Array\n        },\n    });\n\n    const role_priorities = {\n        'Chair': 1,\n        'Coordinator': 2,\n        'Grant Liaison': 3,\n        'Biocurator': 4,\n        'Expert': 5,\n    };\n\n    const rolePriority = (role) => {\n        return role_priorities[role.display_name] ?? Infinity;\n    }\n\n    const tableSort = ref({\n        field: 'roles',\n        desc: false\n    });\n\n    const nameSort = (a, b) => {\n        let cmp = a.last_name.localeCompare(b.last_name);\n        if (cmp === 0) {\n            cmp = a.first_name.localeCompare(b.first_name);\n        }\n        return cmp;\n    }\n\n    const fields = ref([\n        {\n            name: 'name',\n            sortable: true,\n            label: 'Name',\n            sortFunction: nameSort,\n        },\n        {\n            name: 'legacy_credentials',\n            sortable: false,\n            label: 'Credentials',\n        },\n        {\n            name: 'roles',\n            sortable: true,\n            label: 'Roles',\n            sortFunction: (a, b) => {\n                return a.role_priority - b.role_priority;\n            },\n        },\n        {\n            name: 'legacy_expertise',\n            sortable: false,\n            label: 'Expertise',\n        },\n        {\n            name: 'institution',\n            sortable: false,\n            label: 'Institution',\n        },\n    ]);\n\n    const tableRows = computed( () => {\n        return props.members.map(m => {\n            const roles = m.roles.toSorted((a, b) => a.id - b.id);\n            return {\n                id: m.id,\n                first_name: m.person.first_name,\n                last_name: m.person.last_name,\n                name: m.person.name,\n                institution: m.person.institution?.name,\n                legacy_credentials: m.person.legacy_credentials,\n                legacy_expertise: m.legacy_expertise,\n                roles: roles,\n                role_priority: Math.min(...roles.map(rolePriority)),\n                active: m.isActive,\n                person: m.person\n            }\n        }).filter(m => m.active);\n    });\n\n    const defaultAdd = (obj, key) => {\n        // like a python defaultdict...\n        if (!obj[key]) {\n            obj[key] = 0;\n        }\n        obj[key]++;\n    }\n\n    const counts = computed(() => {\n        const counts = {};\n        counts['Total'] = tableRows.value.length;\n        console.log(tableRows.value);\n        Object.keys(role_priorities).forEach(r => counts[r] = 0);\n        tableRows.value.forEach(m => {\n            m.roles.forEach(r => defaultAdd(counts, r.display_name));\n            if (m.roles.length === 0) {\n                defaultAdd(counts, 'None');\n            }\n        });\n        return counts;\n    });\n\n</script>\n<template>\n    <div>\n        <div v-for=\"(count, role) in counts\" :key=\"role\">\n            <span>{{ role }}: {{ count }}</span>\n        </div>\n        <data-table\n            :fields=\"fields\"\n            :data=\"tableRows\"\n            v-model:sort=\"tableSort\"\n            class=\"text-xs\"\n        >\n            <template v-slot:cell-roles=\"{item}\">\n                <span>{{ item.roles.map(r => r.display_name).join(', ') }}</span>\n            </template>\n            <template v-slot:cell-legacy_credentials=\"{item}\">\n                <CredentialsView :person=\"item.person\" />\n            </template>\n            <template v-slot:cell-legacy_expertise=\"{item}\">\n                <ExpertisesView :person=\"item.person\" :legacyExpertise=\"item.legacy_expertise\" />\n            </template>\n        </data-table>\n    </div>\n</template>\n","import script from \"./ReviewMembership.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ReviewMembership.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\n    import {useStore} from 'vuex';\n    import { computed} from 'vue'\n    import ReviewSection from '@/components/expert_panels/ReviewSection.vue'\n    import ReviewMembership from '@/components/expert_panels/ReviewMembership.vue'\n    import { formatDate } from '@/date_utils'\n\n    const store = useStore();\n    const group = computed(() => store.getters['groups/currentItemOrNew'])\n    const expertPanel = computed(() => group.value.expert_panel);\n    const members = computed( () => {\n        if (!group.value) {\n            return [];\n        }\n        return group.value.members;\n    });\n\n    const basicInfo = computed(() => {\n        return {\n            type: group.value.type.name ? group.value.type.name.toUpperCase() : '',\n            long_base_name: expertPanel.value.long_base_name,\n            short_base_name: expertPanel.value.short_base_name,\n        }\n    });\n</script>\n\n<template>\n    <div class=\"space-y-4\">\n        <ReviewSection title=\"Basic Information\" name=\"basic-info\">\n            <object-dictionary :obj=\"basicInfo\" label-class=\"w-40 font-bold\" />\n            <dictionary-row label=\"CDWG\" label-class=\"w-40 font-bold\">\n                {{group.parent ?  group.parent.name : '--'}}\n            </dictionary-row>\n        </ReviewSection>\n\n        <ReviewSection title=\"Membership\" name=\"membership\">\n            <ReviewMembership :members=\"members\" />\n\n            <div v-if=\"group.is_vcep_or_scvcep\" class=\"mt-6\">\n                <h4>Expertise of VCEP members</h4>\n                <blockquote>\n                    <markdown-block :markdown=\"expertPanel.membership_description\" />\n                </blockquote>\n            </div>\n        </ReviewSection>\n\n        <ReviewSection title=\"Scope\" name=\"scope\">\n            <h3>Genes</h3>\n            <div class=\"mb-6\">\n                <p v-if=\"group.is_gcep\">{{expertPanel.genes.map(g => g.gene_symbol).join(', ')}}</p>\n                <simple-table\n                    v-if=\"group.is_vcep_or_scvcep\"\n                    :data=\"\n                        expertPanel.genes.map((g) => ({\n                            id: g.id,\n                            gene: g.gene_symbol,\n                            disease: g.disease_name,\n                        }))\n                    \"\n                    :key-by=\"'id'\"\n                    :hide-columns=\"['id']\"\n                />\n            </div>\n\n            <h3>Description of scope</h3>\n            <blockquote><markdown-block :markdown=\"expertPanel.scope_description\" /></blockquote>\n        </ReviewSection>\n\n        <ReviewSection v-if=\"group.is_gcep\" title=\"Plans\" name=\"plans\">\n            <dictionary-row label=\"Selected protocol\" label-class=\"w-48 font-bold\">\n                <div class=\"flex-none\">\n                    {{expertPanel.curation_review_protocol ? titleCase(expertPanel.curation_review_protocol.full_name) : null}}\n                    <p v-if=\"expertPanel.curation_review_protocol_id == 100\" class=\"mt-1\">\n                        <em>Details:</em> {{expertPanel.curation_review_protocol_other}}\n                    </p>\n                </div>\n            </dictionary-row>\n        </ReviewSection>\n\n        <ReviewSection v-if=\"group.is_gcep\" title=\"Attestations\" name=\"attestations\">\n            <dictionary-row label=\"GCEP Attestation Signed\" label-class=\"w-52 font-bold\">\n                {{formatDate(expertPanel.gcep_attestation_date)}}\n            </dictionary-row>\n            <dictionary-row label=\"GCI Training Date\" label-class=\"w-52 font-bold\">\n                {{formatDate(expertPanel.gci_training_date)}}\n            </dictionary-row>\n            <dictionary-row label=\"NHGRI Attestation Signed\" label-class=\"w-52 font-bold\">\n                {{formatDate(expertPanel.nhgri_attestation_date)}}\n            </dictionary-row>\n        </ReviewSection>\n\n        <ReviewSection\n            v-if=\"group.is_vcep_or_scvcep\"\n            title=\"Attestations\"\n            name=\"attestations\"\n        >\n            <dictionary-row\n                label=\"Reanalysis and Discrepancy Resolution Attestation Signed\"\n                label-class=\"w-52 font-bold\"\n            >\n                {{formatDate(expertPanel.reanalysis_attestation_date)}}\n            </dictionary-row>\n            <dictionary-row label=\"NHGRI Attestation Signed\" label-class=\"w-60 font-bold\">\n                {{formatDate(expertPanel.nhgri_attestation_date)}}\n            </dictionary-row>\n        </ReviewSection>\n    </div>\n</template>\n","import script from \"./DefinitionReview.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./DefinitionReview.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import {ref} from 'vue';\nimport {isValidationError} from '@/http'\n\nclass BaseEntityForm {\n    constructor(fields, repository) {\n        this.fields = fields;\n        this.repo = repository\n        \n        this.currentItem = ref({})\n        this.originalItem = ref({})\n        this.errors = ref({})\n    }\n\n     async find (id) {\n        return await this.repo.find(id)\n            .then(data => {\n                this.currentItem.value = data\n                this.originalItem.value = data\n                return data\n            });\n    }\n\n     async save (data) {\n        this.clearErrors()\n        try {\n            const newItem = await this.repo.save(data)\n            this.clearCurrentItem()\n            return newItem;\n        } catch (e) {\n            if (isValidationError(e)) {\n                this.errors.value = e.response.data.errors\n            }\n            throw e\n        }\n    }\n    \n     async update (data) {\n        this.clearErrors()\n        try {\n            this.currentItem.value = this.repo.update(data)\n            return this.currentItem.value\n        } catch (e) {\n            if (isValidationError(e)) {\n                this.errors.value = e.response.data.errors\n            }\n            throw e\n        }\n    }\n    \n     async destroy (item) {\n        this.repo.destroy(item)\n    }\n    \n    cancel () {\n        this.clearErrors()\n        if (!this.currentItem.value.id) {\n            this.clearCurrentItem()\n            return;\n        }\n    }\n    \n    clearCurrentItem () {\n        this.currentItem.value = {}\n    }\n    \n    clearErrors () {\n        this.errors.value = {}\n    }\n}\n\nexport default BaseEntityForm","import BaseRepository from './base_repository.js'\n\nclass CommentTypeRepository extends BaseRepository\n{\n    constructor (baseUrl, options = {}) {\n        super(baseUrl, options);\n        this.cachedList = null;\n    }\n\n    query (params) {\n        if (!this.cachedList) {\n            const results = super.query(params)\n            this.cachedList = results;\n        }\n\n        return this.cachedList\n    }\n    \n    // eslint-disable-next-line\n    find (id) {\n        throw Error('CommentTypeRepository.find not implemented');\n    }\n\n    // eslint-disable-next-line\n    save (data) {\n        throw Error('CommentTypeRepository.save not implemented');\n    }\n\n    // eslint-disable-next-line\n    update (id) {\n        throw Error('CommentTypeRepository.update not implemented');\n    }\n\n    // eslint-disable-next-line\n    destroy (id) {\n        throw Error('CommentTypeRepository.destroy not implemented');\n    }\n}\n\nexport const typeRepository = (new CommentTypeRepository('/api/comment-types'));\nexport default typeRepository","import {ref} from 'vue'\nimport BaseEntityForm from \"./base_entity_form.js\";\nimport commentRepository from '@/repositories/comment_repository.js'\nimport typeRepository from '@/repositories/comment_type_repository.js'\n\nexport const commentTypes = ref([]);\nexport const getCommentTypes = async () => {\n    return await typeRepository.query()\n            .then(items => {\n                commentTypes.value = items.map(i => ({label: i.name, value: i.id}));\n                return commentTypes.value;\n            });\n};\n\nexport const fields = ref([\n    {\n        name: 'comment_type_id',\n        label: 'Type',\n        type: 'select',\n        options: commentTypes,\n        required: true,\n    },\n    {\n        name: 'content',\n        label: 'Comment',\n        type: 'large-text',\n        required: true,\n    },\n]);\n\n\nexport default () => {\n    getCommentTypes();\n\n    return (new BaseEntityForm(fields, commentRepository))\n}","<script setup>\n    import { computed, onMounted, inject } from 'vue';\n    import formDefFactory from '../../forms/comment_form.js';\n\n    const group = inject('group');\n\n    const props = defineProps({\n        commentManager: {\n            type: Object,\n            required: true\n        },\n        section: {\n            type: [String, null],\n            default: null\n        },\n        subjectType: {\n            type: String,\n            default: 'App\\\\Modules\\\\Group\\\\Models\\\\Group'\n        },\n        subjectId: {\n            type: Number,\n            required: false\n        },\n        comment: {\n            type: Object,\n        },\n        onlyInternal: {\n            type: Boolean,\n            default: false\n        }\n    });\n\n    onMounted(() => {\n        if (props.comment) {\n            formDef.currentItem.value = props.comment\n        }\n    })\n\n    const emits = defineEmits(['saved', 'canceled']);\n\n    const formDef = formDefFactory();\n\n    const fields = computed(() => {\n        const fields = [...formDef.fields.value];\n        if (props.onlyInternal) {\n            const typeFieldIdx = fields.findIndex(f => f.name == 'comment_type_id');\n            fields.splice(typeFieldIdx, 1);\n        }\n        return fields;\n    })\n    const errors = computed(() => {\n        return formDef.errors.value\n    })\n\n    const newComment = computed({\n        get () {\n            return formDef.currentItem.value\n        },\n        set (value) {\n            formDef.currentItem.value = value\n        }\n    })\n\n    const cancel = () => {\n        formDef.clearCurrentItem()\n        formDef.clearErrors()\n        emits('canceled')\n    }\n\n    const create = () => {\n        newComment.value.subject_type = props.subjectType,\n        newComment.value.subject_id = props.subjectId || group.value.id,\n        newComment.value.metadata = {\n            section: props.section,\n            // This metadata is necessary to ensure reply comments are included in notifications.\n            root_subject_type: 'App\\\\Modules\\\\Group\\\\Models\\\\Group',\n            root_subject_id: group.value.id\n        }\n\n        if (props.onlyInternal) {\n            newComment.value.comment_type_id = 1\n        }\n        formDef.save(newComment.value)\n            .then(comment => {\n                props.commentManager.addComment(comment);\n                emits('saved', comment);\n            })\n    }\n\n    const update = () => {\n        if (props.onlyInternal) {\n            newComment.value.comment_type_id = 1\n        }\n        formDef.update(newComment.value)\n            .then(comment => {\n                props.commentManager.updateComment(comment);\n                emits('saved', comment);\n            })\n    }\n\n    const save = () => {\n        if (newComment.value.id) {\n            update();\n            return;\n        }\n        create();\n    }\n</script>\n<template>\n    <div>\n        <data-form :fields=\"fields\" v-model=\"newComment\" :errors=\"errors\"></data-form>\n        <button-row size=\"xs\" submit-text=\"Save\" @submitted=\"save\" @canceled=\"cancel\"></button-row>\n    </div>\n</template>\n","import script from \"./ReviewCommentForm.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ReviewCommentForm.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\n    import {ref, computed, onMounted} from 'vue'\n    import {useStore} from 'vuex'\n    import ReviewCommentForm from './ReviewCommentForm.vue'\n    import commentFormFactory from '@/forms/comment_form.js'\n    import commentRepository from '../../repositories/comment_repository';\n    import DropdownItem from '../DropdownItem.vue';\n    import commentManagerFactory from '@/composables/comment_manager.js'\n    import {hasPermission} from '../../auth_utils';\n\n    const store = useStore();\n\n    const formDef = commentFormFactory();\n    const props = defineProps({\n        comment: {\n            type: Object,\n            required: true\n        },\n        commentManager: {\n            type: Object,\n            required: true\n        }\n    });\n    const emits = defineEmits(['created', 'updated', 'resolved', 'unresolved', 'deleted']);\n\n    const replyManager = ref(commentManagerFactory('App\\\\Models\\\\Comment', props.comment.id))\n\n    const showEditForm = ref(false);\n    const showConfirmDelete = ref(false);\n\n    const getVariant = comment => {\n        if (!comment.type) {\n            return 'gray'\n        }\n        switch (comment.type.name) {\n            case 'required revision':\n                return 'yellow'\n            case 'suggestion':\n                return 'blue'\n            case 'internal comment':\n                return 'gray'\n            default:\n                null\n                break;\n        }\n    }\n\n    const initDelete = () => {\n        showConfirmDelete.value = true\n    }\n    const deleteComment = () => {\n        formDef.destroy(props.comment)\n            .then(() => {\n                showConfirmDelete.value = false;\n                props.commentManager.removeComment(props.comment);\n                emits('deleted', props.comment);\n            })\n    }\n\n    const toggleResolution = async () => {\n        if (props.comment.is_resolved) {\n            const updatedCmt = await commentRepository.unresolve(props.comment.id)\n            props.commentManager.updateComment(updatedCmt)\n            emits('updated');\n            emits('resolved');\n            return;\n        }\n\n        const updatedCmt = await commentRepository.resolve(props.comment.id)\n        props.commentManager.updateComment(updatedCmt)\n        emits('updated');\n        emits('unresolved');\n    }\n\n    const showReplyList = ref(false);\n    const toggleReplies = async () => {\n        if (!showReplyList.value) {\n            showReplies();\n        }\n        showReplyList.value = !showReplyList.value;\n    }\n\n    const showReplies = () => {\n        replyManager.value.getComments()\n            .then(rsp => {\n                showReplyList.value = true;\n                return rsp;\n            });\n    }\n\n    const showReplyForm = ref(false);\n    const initReply = () => showReplyForm.value = true;\n    const handleNewReply = () => {\n        const commentClone = {...props.comment};\n        commentClone.comments_count += 1;\n        props.commentManager.updateComment(commentClone);\n        showReplyList.value = true;\n        showReplyForm.value = false;\n    }\n    const handleReplyRemoved = () => {\n        const commentClone = {...props.comment};\n        commentClone.comments_count -= 1;\n        props.commentManager.updateComment(commentClone);\n    }\n\n    onMounted(() => {\n        replyManager.value.getComments();\n    })\n\n    const canEdit = computed(() => hasPermission('comments-manage') || store.getters.currentUser.person.id == props.comment.creator_id)\n</script>\n<template>\n    <div class=\"my-2\">\n        <div class=\"comment-container\">\n            <div v-if=\"!showEditForm\" class=\"relative\">\n                <div class=\"flex justify-between items-start mb-1 rounded\">\n                    <div class=\"flex space-x-2 items-end\">\n                        <strong class=\"block\">{{comment.creator && comment.creator.name}}</strong>\n                        <badge class=\"block\" :color=\"getVariant(comment)\" size=\"xxs\">\n                            {{comment.type && titleCase(comment.type.name)}}\n                        </badge>\n                        <popper hover arrow content=\"Resolved\" v-if=\"comment.is_resolved\">\n                            <icon-checkmark\n                                class=\"text-green-500\"\n                                title=\"Resolved\"\n                            />\n                        </popper>\n                    </div>\n                    <div class=\"flex space-x-2\">\n                        <dropdown-menu hideCheveron v-if=\"canEdit\">\n                            <dropdown-item @click=\"showEditForm = true\">Edit</dropdown-item>\n                            <dropdown-item @click=\"toggleResolution\">{{comment.is_resolved ? 'Mark unresolved' : 'Resolve'}}</dropdown-item>\n                            <dropdown-item @click=\"initDelete\">Delete</dropdown-item>\n                        </dropdown-menu>\n                    </div>\n                </div>\n\n                <markdown-block :markdown=\"comment.content\" class=\"text-sm\" />\n                <button class=\"link\" @click=\"initReply\"><icon-reply class=\"inline-block\" />Reply</button>\n\n\n                <static-alert variant=\"danger\" v-show=\"showConfirmDelete\" class=\"\">\n                    Continue with delete?\n                    <button-row\n                        size=\"xs\"\n                        submit-text=\"Yes, delete\"\n                        @submitted=\"deleteComment\"\n                        @canceled=\"showConfirmDelete=false\"\n                        submitVariant=\"red\"\n                    ></button-row>\n                </static-alert>\n            </div>\n            <ReviewCommentForm v-else\n                @canceled=\"showEditForm = false\"\n                @saved=\"showEditForm = false\"\n                :comment=\"comment\"\n                :commentManager=\"commentManager\"\n            />\n        </div>\n\n\n        <div class=\"replies ml-1\">\n            <ul v-if=\"showReplyList\">\n                <li v-for=\"reply in replyManager.comments\" :key=\"reply.id\"\n                    class=\"border-l-2 mt-2 px-2 py-1 bg-gray-100 bg-opacity-50\"\n                >\n                    <ReviewComment :comment=\"reply\" :commentManager=\"replyManager\" @deleted=\"handleReplyRemoved\" />\n                </li>\n            </ul>\n            <button class=\"link text-sm\" v-if=\"comment.comments_count > 0\" @click=\"toggleReplies\">\n                {{showReplyList ? 'Hide' : 'Show'}}\n                {{comment.comments_count}}\n                {{comment.comments_count > 1 ? 'replies' : 'reply'}}\n            </button>\n            <div v-show=\"showReplyForm\" class=\"border-l-2 mt-2 px-2 py-1 bg-gray-100 bg-opacity-50\">\n                <strong>Your Reply</strong>\n                <ReviewCommentForm\n                    subjectType=\"App\\Models\\Comment\"\n                    :subjectId=\"comment.id\"\n                    :onlyInternal=\"true\"\n                    :commentManager=\"replyManager\"\n                    @saved=\"handleNewReply\"\n                    @canceled=\"showReplyForm = false\"\n                />\n            </div>\n        </div>\n    </div>\n</template>\n","import script from \"./ReviewComment.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ReviewComment.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\n    import { ref, computed, inject } from 'vue'\n    import ReviewComment from '@/components/expert_panels/ReviewComment.vue'\n    import ReviewCommentForm from './ReviewCommentForm.vue'\n\n    const commentManager = inject('commentManager')\n\n    const props = defineProps({\n        title: {\n            type: String || null,\n            default: null\n        },\n        name: {\n            type: String || null,\n            default: null\n        },\n    });\n\n\n    const showCommentForm = ref(false);\n\n    const showComments = ref(true)\n    const sectionComments = computed(() => {\n        if (!commentManager) {\n            return [];\n        }\n        return commentManager.value.comments.filter(c => {\n            if (c.metadata) {\n                return c.metadata.section == props.name\n            }\n            return false\n        })\n    })\n\n    const countColor = computed(() => {\n        if (!commentManager) {\n            return null;\n        }\n        if (sectionComments.value.find(c => c.type.name == 'required revision')) {\n            return 'yellow'\n        }\n        if (sectionComments.value.find(c => c.type.name == 'suggestion')) {\n            return 'blue'\n        }\n        return 'gray'\n    })\n</script>\n\n<template>\n    <section class=\"lg:flex lg:space-x-4 screen-block\">\n        <div class=\"overflow-x-auto flex-grow\" :class=\"{'lg:w-3/5': showComments}\">\n            <header class=\"flex justify-between items-start space-x-4\">\n                <h2 class=\"flex-grow\" :class=\"{'lg:w-3/5': !showComments}\">{{title}}</h2>\n                <div class=\"flex justify-between items-center lg:w-2/5 px-2 py-1 pb-0 bg-gray-100 rounded-lg\" v-show=\"!showComments\"  v-if=\"commentManager\">\n                    <h3>\n                        <icon-cheveron-right class=\"inline cursor-pointer\" @click=\"showComments = true\"/>\n                        Comments\n                        <badge :color=\"countColor\">{{sectionComments.length}}</badge>\n                    </h3>\n                </div>\n\n            </header>\n            <div>\n                <div>\n                    <slot></slot>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"lg:w-2/5 p-2 bg-gray-100 rounded-lg mb-2\" v-show=\"showComments && commentManager\">\n            <div class=\"flex justify-between items-center\">\n                <h3>\n                    <icon-cheveron-down class=\"inline cursor-pointer\" @click=\"showComments = false\" />\n                    Comments\n                </h3>\n            </div>\n            <ul>\n                <li v-for=\"comment in sectionComments\" :key=\"comment.id\" class=\"bg-white p-2\">\n                    <ReviewComment :comment=\"comment\" :commentManager=\"commentManager\"></ReviewComment>\n                </li>\n            </ul>\n            <div class=\"bg-white mt-2 p-2\">\n                <ReviewCommentForm v-if=\"showCommentForm\"\n                    :section=\"name\"\n                    :commentManager=\"commentManager\"\n                    @saved=\"showCommentForm = false\"\n                    @canceled=\"showCommentForm = false\"\n                />\n                <button v-else class=\"btn btn-xs block\" @click=\"showCommentForm = true\">Add comment</button>\n            </div>\n        </div>\n    </section>\n</template>\n","import script from \"./ReviewSection.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ReviewSection.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\n    import EvidenceSummaryList from '@/components/expert_panels/EvidenceSummaryList.vue'\n    import {computed, watch } from 'vue'\n    import {useStore} from 'vuex'\n    import ReviewSection from '@/components/expert_panels/ReviewSection.vue'\n\n    const store = useStore();\n    const group = computed(() => store.getters['groups/currentItemOrNew'])\n    const expertPanel = computed(() => group.value.expert_panel)\n\n    watch(() => group.value, (to, from) => {\n        if ((to.id && (!from || to.id != from.id))) {\n            store.dispatch('groups/getEvidenceSummaries', group.value);\n        }\n    });\n</script>\n\n<template>\n    <div class=\"application-review p-2 bg-gray-100\">\n            <ReviewSection\n                v-if=\"expertPanel.has_approved_pilot\"\n                title=\"Plans for Ongoing Review and Discrepancy Resolution\"\n                name=\"discrepency-review\"\n            >\n                <dictionary-row label=\"Selected protocol\" labelWidthClass=\"w-48 font-bold\">\n                    <div class=\"w-full\">\n                        {{expertPanel.curation_review_protocol ? titleCase(expertPanel.curation_review_protocol.full_name) : null}}\n                        <p v-if=\"expertPanel.curation_review_protocol_id == 100\" class=\"mt-1\">\n                            <em>Details:</em> {{expertPanel.curation_review_protocol_other}}\n                        </p>\n                    </div>\n                </dictionary-row>\n                <dictionary-row label=\"Notes\" labelWidthClass=\"w-48 font-bold\">\n                    <markdown-block :markdown=\"expertPanel.curation_review_process_notes\" />\n                </dictionary-row>\n            </ReviewSection>\n\n            <ReviewSection v-if=\"expertPanel.has_approved_pilot\"\n                title=\"Evidence Summaries\"\n                name=\"evidence-summaries\"\n            >\n                <evidence-summary-list :readonly=\"true\" />\n            </ReviewSection>\n\n            <ReviewSection v-if=\"expertPanel.has_approved_pilot\"\n                title=\"Core Approval Member, Trained Biocurator, and Biocurator Trainer Designation\"\n                name=\"member-designation\"\n            >\n                <dictionary-row label=\"Core Approval Members\" labelWidthClass=\"w-48 font-bold\">\n                    {{group.coreApprovalMembers.map(m => m.person.name).join(', ')}}\n                </dictionary-row>\n                <dictionary-row label=\"Biocurator Trainers\" labelWidthClass=\"w-48 font-bold\">\n                    {{group.biocuratorTrainers.map(m => m.person.name).join(', ')}}\n                </dictionary-row>\n                <dictionary-row label=\"Trained Biocurators\" labelWidthClass=\"w-48 font-bold\">\n                    {{group.trainedBiocurators.map(m => m.person.name).join(', ')}}\n                </dictionary-row>\n            </ReviewSection>\n\n            <!-- <div v-if=\"!expertPanel.has_appoved_pilot\" class=\"screen-block\">\n                No approved pilot.\n            </div> -->\n    </div>\n</template>\n","import script from \"./SustainedCurationReview.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./SustainedCurationReview.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["types","internal","suggestion","requirement","subjectType","subjectId","comments","ref","openComments","computed","value","filter","c","is_resolved","openRequirements","comment_type_id","openSuggestions","commentsForEp","openInternal","findCommentIndex","comment","findIndex","id","getComments","async","commentRepository","where","subject_type","subject_id","addComment","push","removeComment","splice","updateComment","subject","type","BaseRepository","constructor","baseUrl","options","this","query","params","queryString","queryStringFromParams","api","then","response","transformToEntity","data","find","save","update","destroy","item","entityClass","Array","isArray","map","i","resolve","unresolve","role_priorities","rolePriority","role","display_name","Infinity","tableSort","field","desc","nameSort","a","b","cmp","last_name","localeCompare","first_name","fields","name","sortable","label","sortFunction","role_priority","tableRows","props","members","m","roles","toSorted","person","institution","legacy_credentials","legacy_expertise","Math","min","active","isActive","defaultAdd","obj","key","counts","length","console","log","Object","keys","forEach","r","__exports__","store","useStore","group","getters","expertPanel","expert_panel","basicInfo","toUpperCase","long_base_name","short_base_name","BaseEntityForm","repository","repo","currentItem","originalItem","errors","clearErrors","newItem","clearCurrentItem","e","isValidationError","cancel","CommentTypeRepository","super","cachedList","results","Error","typeRepository","commentTypes","getCommentTypes","items","required","inject","onMounted","formDef","formDefFactory","onlyInternal","typeFieldIdx","f","newComment","get","set","emits","create","metadata","section","root_subject_type","root_subject_id","commentManager","commentFormFactory","replyManager","commentManagerFactory","showEditForm","showConfirmDelete","getVariant","initDelete","deleteComment","toggleResolution","updatedCmt","showReplyList","toggleReplies","showReplies","rsp","showReplyForm","initReply","handleNewReply","commentClone","comments_count","handleReplyRemoved","canEdit","hasPermission","currentUser","creator_id","showCommentForm","showComments","sectionComments","countColor","watch","to","from","dispatch"],"sourceRoot":""}