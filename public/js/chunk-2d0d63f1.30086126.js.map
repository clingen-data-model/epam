{"version":3,"sources":["webpack:///./src/views/Dashboard.vue","webpack:///./src/views/Dashboard.vue?8dc4"],"names":["class","user","id","person","tag","name","notifications","notification","key","removeNotification","variant","data","type","membershipsWithPendingCois","membership","group","to","label","groups","length","fields","groupFields","sort","groupSort","navigateToGroup","row-class","cell-status_name","value","color","groupBadgeColor","personFromStore","components","CoiList","NotificationItem","PersonProfile","props","setup","store","router","getters","loadPersonInStore","commit","loadingNotifications","getNotifications","get","uuid","then","response","index","findIndex","item","splice","memberships","map","m","filter","g","sortable","String","resolveValue","status","configs","statuses","expert_panel","currentStepName","field","desc","Active","Retired","Removed","push","params","render"],"mappings":"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","file":"js/chunk-2d0d63f1.30086126.js","sourcesContent":["<template>\n    <div>\n        <h1>\n            Dashboard\n            <div class=\"note font-normal\">\n                User ID: {{user.id}}\n                |\n                Person ID: {{user.person ? user.person.id : 'no person!!'}}\n            </div>\n        </h1>\n        <transition-group tag=\"div\" name=\"slide-fade-down\">\n            <notification-item \n                v-for=\"notification in notifications\" :key=\"notification.id\"\n                :notification=\"notification\"\n                class=\"mt-2\"\n                @removed=\"removeNotification(notification)\"\n                :variant=\"notification.data.type\"\n            ></notification-item>\n            <static-alert \n                v-for=\"membership in user.person.membershipsWithPendingCois\" \n                :key=\"membership.id\"\n                class=\"mt-2 font-bold\"\n                variant=\"warning\"\n            >\n                You have a pending Conflict of Interest Disclosure for {{membership.group.name}}.\n                <br>\n                <br>\n                <router-link \n                    :to=\"{\n                        name: 'alt-coi', \n                        params: {\n                            name: membership.group.name, \n                            code: membership.group.expert_panel.coi_code\n                        }\n                    }\"\n                    class=\"btn\"\n                >\n                    Complete this COI Disclosure\n                </router-link>\n            </static-alert>\n        </transition-group>\n        <tabs-container class=\"mt-8\">\n            <tab-item label=\"Your Groups\">\n                <div class=\"well\" v-if=\"!groups.length\">You are not assigned to any groups.</div>\n                <data-table\n                    v-else\n                    :data=\"groups\"\n                    :fields=\"groupFields\"\n                    v-model:sort=\"groupSort\"\n                    @rowClick=\"navigateToGroup\"\n                    row-class=\"cursor-pointer\"\n                >\n                    <template v-slot:cell-status_name=\"{value}\">\n                        <badge :color=\"groupBadgeColor(value)\">{{value}}</badge>\n                    </template>\n                </data-table>\n            </tab-item>\n\n            <tab-item label=\"Your Info\">\n                <person-profile :person=\"personFromStore\"></person-profile>\n            </tab-item>\n\n            <tab-item label=\"COIs\">\n                <coi-list :person=\"user.person\"></coi-list>\n            </tab-item>\n\n        </tabs-container>\n    </div>\n</template>\n<script>\nimport {useStore} from 'vuex'\nimport {useRouter} from 'vue-router'\nimport {ref, computed, onMounted, watch} from 'vue'\nimport {api} from '@/http'\nimport NotificationItem from '@/components/NotificationItem'\nimport CoiList from '@/components/people/CoiList'\nimport PersonProfile from '@/components/people/PersonProfile'\nimport Person from \"@/domain/person\"\nimport Group from \"@/domain/group\"\nimport configs from '@/configs'\n\nexport default {\n    name: 'Dashboard',\n    components: {\n        CoiList,\n        NotificationItem,\n        PersonProfile\n    },\n    data() {\n        return {\n        }\n    },\n    props: {\n        \n    },\n    setup () {\n        const store = useStore();\n        const router = useRouter();\n        const user = computed(() => {\n            return store.getters['currentUser']\n        });\n        const personFromStore = computed(() => {\n            return store.getters['people/currentItem'] || new Person();\n        })\n        const loadPersonInStore = () => {\n            if (user.value.id && user.value.person && user.value.person.id) {\n                store.commit('people/addItem', user.value.person);\n                store.commit('people/setCurrentItemIndex', user.value.person);\n            }\n        }\n        watch(() => user, () => {\n            loadPersonInStore();\n        });\n        onMounted(() => {\n            loadPersonInStore();\n        });\n\n        // NOTIFICATIONS\n        // TODO: Extract to modules\n        const loadingNotifications = ref(false);\n        const notifications = ref([]);\n        const getNotifications = async () => {\n            loadingNotifications.value = true;\n            notifications.value = await api.get(`/api/people/${user.value.person.uuid}/notifications/unread`)\n                                .then(response => response.data)\n            loadingNotifications.value = false;\n        }\n        const removeNotification = (notification) => {\n            const index = notifications.value.findIndex((item) => item.id == notification.id);\n            if (index > -1) {\n                notifications.value.splice(index, 1);\n            }\n        }\n\n\n        // GROUPS\n        // TODO: Get groups by search with TONS of info.\n        // TODO: Extract that work to a module.\n        const groups = computed(() => {\n            return user.value.memberships\n                    .map(m => m.group)\n                    .filter(g => g !== null)\n                    .map(group => new Group(group))\n        });\n        const groupFields = ref([\n            {\n                name: 'displayName',\n                sortable: true,\n                type: String\n            },\n            {\n                name: 'status.name',\n                label: 'Status',\n                sortable: true,\n                resolveValue: (item) => {\n                    if (item.status.id == configs.groups.statuses['pending-approval'].id) {\n                        return item.status.name+' - '+item.expert_panel.currentStepName;\n                    }\n                    return item.status.name;\n                },\n                type: String\n            },\n        ]);\n        const groupSort = ref({\n            field: 'displayName',\n            desc: false\n        });\n        const groupBadgeColor = (status) => {\n            const map = {\n                Active: 'green',\n                'Pending-Approval': 'blue',\n                Retired: 'yellow',\n                Removed: 'red'\n            }\n            return map[status] || 'blue'\n        };\n\n\n        // TODO: extract to module.\n        // TODO: Get coi data on demand\n\n        onMounted(() => {\n            getNotifications();\n        })\n\n        return {\n            user,\n            personFromStore,\n            loadingNotifications,\n            notifications,\n            groups,\n            groupSort,\n            groupFields,\n            groupBadgeColor,\n            getNotifications,\n            removeNotification,\n            navigateToGroup: (item) => {\n                router.push({\n                    name: 'GroupDetail',\n                    params: {uuid: item.uuid}\n                })\n            }\n        }\n        \n    }\n}\n</script>","import { render } from \"./Dashboard.vue?vue&type=template&id=568f652c\"\nimport script from \"./Dashboard.vue?vue&type=script&lang=js\"\nexport * from \"./Dashboard.vue?vue&type=script&lang=js\"\nscript.render = render\n\nexport default script"],"sourceRoot":""}