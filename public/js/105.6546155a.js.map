{"version":3,"file":"js/105.6546155a.js","mappings":"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","sources":["webpack://epam/./src/composables/comment_manager.js","webpack://epam/./src/repositories/base_repository.js","webpack://epam/./src/repositories/comment_repository.js","webpack://epam/./src/components/expert_panels/ReviewMembership.vue","webpack://epam/./src/components/expert_panels/ReviewMembership.vue?a42d","webpack://epam/./src/components/expert_panels/DefinitionReview.vue","webpack://epam/./src/components/expert_panels/DefinitionReview.vue?c6b1","webpack://epam/./src/forms/base_entity_form.js","webpack://epam/./src/repositories/comment_type_repository.js","webpack://epam/./src/forms/comment_form.js","webpack://epam/./src/components/expert_panels/ReviewCommentForm.vue","webpack://epam/./src/components/expert_panels/ReviewCommentForm.vue?1f84","webpack://epam/./src/components/expert_panels/ReviewComment.vue","webpack://epam/./src/components/expert_panels/ReviewComment.vue?cf11","webpack://epam/./src/components/expert_panels/ReviewSection.vue","webpack://epam/./src/components/expert_panels/ReviewSection.vue?09ef","webpack://epam/./src/components/expert_panels/SustainedCurationReview.vue","webpack://epam/./src/components/expert_panels/SustainedCurationReview.vue?406d"],"sourcesContent":["import {ref, computed} from 'vue'\nimport commentRepository from '../repositories/comment_repository';\n\nconst types = {\n    internal: 1,\n    suggestion: 2,\n    requirement: 3\n};\n\nexport default (subjectType, subjectId) => {\n    const comments = ref([]);\n\n    const openComments = computed(() => comments.value.filter(c => !c.is_resolved))\n    const openRequirements = computed(() => openComments.value.filter(c =>  c.comment_type_id == types.requirement));\n    const openSuggestions = computed(() => openComments.value.filter(c =>  c.comment_type_id == types.suggestion));\n    const commentsForEp = computed(() => [...openRequirements.value, ...openSuggestions.value])\n    const openInternal = computed(() => openComments.value.filter(c => c.comment_type_id == types.internal));\n\n    const findCommentIndex = (comment) => {\n        return comments.value.findIndex(c => c.id == comment.id)\n    }\n\n    const getComments = async () => {\n        comments.value = await commentRepository.query({where: {\n            subject_type: subjectType,\n            subject_id: subjectId\n        }})\n    }\n\n    const addComment = (comment) => comments.value.push(comment);\n    const removeComment = (comment) => comments.value.splice(findCommentIndex(comment), 1);\n    const updateComment = (comment) => comments.value[findCommentIndex(comment)] = comment;\n\n    return {\n        subject: {\n            type: subjectType,\n            id: subjectId\n        },\n        comments,\n        openComments,\n        openRequirements,\n        openSuggestions,\n        openInternal,\n        getComments,\n        addComment,\n        removeComment,\n        updateComment,\n        commentsForEp\n    }\n}\n","import { api, queryStringFromParams } from '@/http'\n\nexport default class BaseRepository {\n    constructor (baseUrl, options = {}) {\n        this.baseUrl = baseUrl\n        this.options = options\n    }\n\n    query (params) {\n        const queryString = queryStringFromParams(params)\n        return api.get(this.baseUrl+queryString).then(response =>  this.transformToEntity(response.data))\n    }\n\n    find (id) {\n        return api.get(`${this.baseUrl}/${id}`).then(response => this.transformToEntity(response.data))\n    }\n\n     save (data) {\n        return api.post(this.baseUrl, data).then(response => this.transformToEntity(response.data))\n    }\n    \n     update (data) {\n        return api.put(`${this.baseUrl}/${data.id}`, data).then(response => this.transformToEntity(response.data))\n    }\n    \n     destroy (item) {\n        return api.delete(`${this.baseUrl}/${item.id}`)\n    }\n\n    transformToEntity(item) {\n        if (!this.options.entityClass) {\n            return item;\n        }\n\n        if (Array.isArray(item)) {\n            return item.map(i => new this.options.entityClass(i))\n        }\n        return item;\n    }\n}","import BaseRepository from './base_repository.js'\nimport {api} from '@/http'\n\n\nconst commentRepository = (new BaseRepository('/api/comments'));\ncommentRepository.resolve = (id) => {\n    return api.post(`/api/comments/${id}/resolved`)\n            .then(response => response.data);\n}\ncommentRepository.unresolve = (id) => {\n    return api.post(`/api/comments/${id}/unresolved`)\n            .then(response => response.data);\n}\n\nexport {commentRepository};\n\nexport default commentRepository;\n","<script setup>\n    import { computed, ref, watch } from 'vue'\n    import axios from 'axios'\n    import {hasPermission} from '../../auth_utils';\n    import CredentialsView from '../people/CredentialsView.vue';\n    import ExpertisesView from '../people/ExpertisesView.vue';\n    import { formatDate } from '@/date_utils'\n\n    const props = defineProps({\n        members: {\n            required: true,\n            type: Array\n        },\n    });\n\n    const loadPubmed = computed(() => hasPermission('ep-applications-approve'))\n\n    const fields = ref(['name', 'credentials', 'expertise', 'institution']);\n    if (hasPermission('ep-applications-manage')) {\n        fields.value.push('coi_completed');\n    }\n\n    const members = ref([]);\n    const chairs = computed(() => tableRows.value.filter(m => m.roles.includes('chair')));\n    const experts = computed(() => tableRows.value.filter(m => m.roles.includes('expert')));\n\n    const memberGroups = computed(() => [\n        {\n            title: 'Leadership',\n            members: chairs.value\n        },\n        {\n            title: 'Coordination',\n            members: tableRows.value.filter(m => m.roles.includes('coordinator'))\n        },\n        {\n            title: 'Biocuration',\n            members: tableRows.value.filter(m => m.roles.includes('biocurator'))\n        },\n        {\n            title: 'Expertise',\n            members: experts.value\n        }\n    ])\n\n    const delay = (ms = 1000) => new Promise((r) => setTimeout(r, ms));\n    const getPublications = async member => {\n        const baseUri = 'https://eutils.ncbi.nlm.nih.gov/entrez/eutils';\n        const searchUrl = `${baseUri}/esearch.fcgi?db=pubmed&term=${member.last_name},+${member.first_name}[author]&retmode=json&retmax=0`;\n\n        return axios.get(searchUrl)\n            .then(rsp => {\n                member.pubCount = rsp.data.esearchresult.count\n            })\n            .catch(async error => {\n                if (error.response.status == 429) {\n                    await delay();\n                    getPublications(member);\n                }\n            });\n    }\n\n    watch(() => props.members, async to => {\n        if (!to) {\n            return;\n        }\n\n        members.value = [...to];\n\n        members.value.sort((a, b) => {\n            if (a.roles.includes('chair') && !b.roles.includes('chair')) {\n                return -1;\n            }\n            if (!a.roles.includes('chair') && b.roles.includes('chair')) {\n                return 1;\n            }\n\n            if (a.roles.includes('expert') && !b.roles.includes('expert')) {\n                return -1;\n            }\n            if (!a.roles.includes('expert') && b.roles.includes('expert')) {\n                return 1;\n            }\n\n            return 0;\n        })\n\n        for(let idx in members.value.filter(m => m.roles.includes('chair') || m.roles.includes('expert'))) {\n            if (loadPubmed.value) {\n                getPublications(members.value[idx])\n                await delay(500);\n            }\n        }\n    }, {immediate: true})\n\n    const tableRows = computed( () => {\n        return props.members.map(m => {\n            const retVal = {\n                id: m.id,\n                first_name: m.person.first_name,\n                last_name: m.person.last_name,\n                name: m.person.name,\n                institution: m.person.institution ? m.person.institution.name : null,\n                // credentials: m.person.credentials,\n                legacy_credentials: m.person.legacy_credentials,\n                legacy_expertise: m.legacy_expertise,\n                roles: m.roles.map(r => r.name).join(', '),\n                person: m.person\n            }\n            if (hasPermission('ep-applications-manage')) {\n                retVal.coi_completed = formatDate(m.coi_last_completed);\n            }\n\n            return retVal;\n        });\n    })\n\n</script>\n<template>\n    <div>\n        <table>\n            <template v-for=\"g in memberGroups\" :key=\"g.title\">\n                <thead>\n                    <tr>\n                        <th colspan=\"6\" class=\"bg-white border-0 pl-0 pb-1 pt-3\">\n                            <span class=\"text-lg\">{{g.title}}</span>\n                            &nbsp;\n                            <badge size=\"xxs\">{{g.members.length}}</badge>\n                        </th>\n                    </tr>\n                </thead>\n                <template v-if=\"g.members.length > 0\">\n                    <thead>\n                        <tr class=\"text-sm\">\n                            <th>Name</th>\n                            <th>Credentials</th>\n                            <th>Expertise</th>\n                            <th>Institution</th>\n                            <th>Publications</th>\n                        </tr>\n                    </thead>\n                    <tbody class=\"text-sm\">\n                        <tr v-for=\"m in g.members\" :key=\"m.id\">\n                            <td>{{m.person.name}}</td>\n                            <td>\n                                <CredentialsView :person=\"m.person\" />\n                            </td>\n                            <td>\n                                <ExpertisesView :person=\"m.person\" :legacyExpertise=\"m.legacy_expertise\" />\n                            </td>\n                            <td>{{m.institution}}</td>\n                            <td>\n                                <div v-if=\"m.pubCount\">\n                                    <popper v-if=\"m.pubCount > 0\" content=\"Go to PubMed results.\" hover arrow placement=\"left\">\n                                        <a :href=\"`https://pubmed.ncbi.nlm.nih.gov/?term=${m.last_name},+${m.first_name}%5BAuthor%5D`\"\n                                            target=\"pubmed\"\n                                            >\n                                            <badge size=\"xxs\">{{m.pubCount}}</badge>\n                                        </a>\n                                    </popper>\n                                    <badge v-else size=\"xxs\">{{m.pubCount}}</badge>\n                                </div>\n                                <button v-else class=\"btn btn-xs\" @click=\"getPublications(m)\">Get</button>\n                            </td>\n                        </tr>\n                    </tbody>\n                </template>\n            </template>\n        </table>\n    </div>\n</template>\n","import script from \"./ReviewMembership.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ReviewMembership.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\n    import {useStore} from 'vuex';\n    import { computed} from 'vue'\n    import ReviewSection from '@/components/expert_panels/ReviewSection.vue'\n    import ReviewMembership from '@/components/expert_panels/ReviewMembership.vue'\n    import { formatDate } from '@/date_utils'\n\n    const store = useStore();\n    const group = computed(() => store.getters['groups/currentItemOrNew'])\n    const expertPanel = computed(() => group.value.expert_panel);\n    const members = computed( () => {\n        if (!group.value) {\n            return [];\n        }\n        return group.value.members;\n    });\n\n    const basicInfo = computed(() => {\n        return {\n            type: group.value.type.name ? group.value.type.name.toUpperCase() : '',\n            long_base_name: expertPanel.value.long_base_name,\n            short_base_name: expertPanel.value.short_base_name,\n        }\n    });\n</script>\n\n<template>\n    <div class=\"space-y-4\">\n        <ReviewSection title=\"Basic Information\" name=\"basic-info\">\n            <object-dictionary :obj=\"basicInfo\" label-class=\"w-40 font-bold\" />\n            <dictionary-row label=\"CDWG\" label-class=\"w-40 font-bold\">\n                {{group.parent ?  group.parent.name : '--'}}\n            </dictionary-row>\n        </ReviewSection>\n\n        <ReviewSection title=\"Membership\" name=\"membership\">\n            <ReviewMembership :members=\"members\" />\n\n            <div v-if=\"group.isVcep()\" class=\"mt-6\">\n                <h4>Expertise of VCEP members</h4>\n                <blockquote>\n                    <markdown-block :markdown=\"expertPanel.membership_description\" />\n                </blockquote>\n            </div>\n        </ReviewSection>\n\n        <ReviewSection title=\"Scope\" name=\"scope\">\n            <h3>Genes</h3>\n            <div class=\"mb-6\">\n                <p v-if=\"group.isGcep()\">{{expertPanel.genes.map(g => g.gene_symbol).join(', ')}}</p>\n                <simple-table\n                    v-if=\"group.isVcep()\"\n                    :data=\"expertPanel.genes.map(g => ({id: g.id,gene: g.gene_symbol, disease: g.disease_name}))\" :key-by=\"'id'\"\n                    :hide-columns=\"['id']\"\n                />\n            </div>\n\n            <h3>Description of scope</h3>\n            <blockquote><markdown-block :markdown=\"expertPanel.scope_description\" /></blockquote>\n        </ReviewSection>\n\n        <ReviewSection v-if=\"group.isGcep()\" title=\"Plans\" name=\"plans\">\n            <dictionary-row label=\"Selected protocol\" label-class=\"w-48 font-bold\">\n                <div class=\"flex-none\">\n                    {{expertPanel.curation_review_protocol ? titleCase(expertPanel.curation_review_protocol.full_name) : null}}\n                    <p v-if=\"expertPanel.curation_review_protocol_id == 100\" class=\"mt-1\">\n                        <em>Details:</em> {{expertPanel.curation_review_protocol_other}}\n                    </p>\n                </div>\n            </dictionary-row>\n        </ReviewSection>\n\n        <ReviewSection v-if=\"group.isGcep()\" title=\"Attestations\" name=\"attestations\">\n            <dictionary-row label=\"GCEP Attestation Signed\" label-class=\"w-52 font-bold\">\n                {{formatDate(expertPanel.gcep_attestation_date)}}\n            </dictionary-row>\n            <dictionary-row label=\"GCI Training Date\" label-class=\"w-52 font-bold\">\n                {{formatDate(expertPanel.gci_training_date)}}\n            </dictionary-row>\n            <dictionary-row label=\"NHGRI Attestation Signed\" label-class=\"w-52 font-bold\">\n                {{formatDate(expertPanel.nhgri_attestation_date)}}\n            </dictionary-row>\n        </ReviewSection>\n\n        <ReviewSection v-if=\"group.isVcep()\" title=\"Attestations\" name=\"attestations\">\n            <dictionary-row\n                label=\"Reanalysis and Discrepancy Resolution Attestation Signed\"\n                label-class=\"w-52 font-bold\"\n            >\n                {{formatDate(expertPanel.reanalysis_attestation_date)}}\n            </dictionary-row>\n            <dictionary-row label=\"NHGRI Attestation Signed\" label-class=\"w-60 font-bold\">\n                {{formatDate(expertPanel.nhgri_attestation_date)}}\n            </dictionary-row>\n        </ReviewSection>\n    </div>\n</template>\n","import script from \"./DefinitionReview.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./DefinitionReview.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import {ref} from 'vue';\nimport {isValidationError} from '@/http'\n\nclass BaseEntityForm {\n    constructor(fields, repository) {\n        this.fields = fields;\n        this.repo = repository\n        \n        this.currentItem = ref({})\n        this.originalItem = ref({})\n        this.errors = ref({})\n    }\n\n     async find (id) {\n        return await this.repo.find(id)\n            .then(data => {\n                this.currentItem.value = data\n                this.originalItem.value = data\n                return data\n            });\n    }\n\n     async save (data) {\n        this.clearErrors()\n        try {\n            const newItem = await this.repo.save(data)\n            this.clearCurrentItem()\n            return newItem;\n        } catch (e) {\n            if (isValidationError(e)) {\n                this.errors.value = e.response.data.errors\n            }\n            throw e\n        }\n    }\n    \n     async update (data) {\n        this.clearErrors()\n        try {\n            this.currentItem.value = this.repo.update(data)\n            return this.currentItem.value\n        } catch (e) {\n            if (isValidationError(e)) {\n                this.errors.value = e.response.data.errors\n            }\n            throw e\n        }\n    }\n    \n     async destroy (item) {\n        this.repo.destroy(item)\n    }\n    \n    cancel () {\n        this.clearErrors()\n        if (!this.currentItem.value.id) {\n            this.clearCurrentItem()\n            return;\n        }\n    }\n    \n    clearCurrentItem () {\n        this.currentItem.value = {}\n    }\n    \n    clearErrors () {\n        this.errors.value = {}\n    }\n}\n\nexport default BaseEntityForm","import BaseRepository from './base_repository.js'\n\nclass CommentTypeRepository extends BaseRepository\n{\n    constructor (baseUrl, options = {}) {\n        super(baseUrl, options);\n        this.cachedList = null;\n    }\n\n    query (params) {\n        if (!this.cachedList) {\n            const results = super.query(params)\n            this.cachedList = results;\n        }\n\n        return this.cachedList\n    }\n    \n    // eslint-disable-next-line\n    find (id) {\n        throw Error('CommentTypeRepository.find not implemented');\n    }\n\n    // eslint-disable-next-line\n    save (data) {\n        throw Error('CommentTypeRepository.save not implemented');\n    }\n\n    // eslint-disable-next-line\n    update (id) {\n        throw Error('CommentTypeRepository.update not implemented');\n    }\n\n    // eslint-disable-next-line\n    destroy (id) {\n        throw Error('CommentTypeRepository.destroy not implemented');\n    }\n}\n\nexport const typeRepository = (new CommentTypeRepository('/api/comment-types'));\nexport default typeRepository","import {ref} from 'vue'\nimport BaseEntityForm from \"./base_entity_form.js\";\nimport commentRepository from '@/repositories/comment_repository.js'\nimport typeRepository from '@/repositories/comment_type_repository.js'\n\nexport const commentTypes = ref([]);\nexport const getCommentTypes = async () => {\n    return await typeRepository.query()\n            .then(items => {\n                commentTypes.value = items.map(i => ({label: i.name, value: i.id}));\n                return commentTypes.value;\n            });\n};\n\nexport const fields = ref([\n    {\n        name: 'comment_type_id',\n        label: 'Type',\n        type: 'select',\n        options: commentTypes,\n        required: true,\n    },\n    {\n        name: 'content',\n        label: 'Comment',\n        type: 'large-text',\n        required: true,\n    },\n]);\n\n\nexport default () => {\n    getCommentTypes();\n\n    return (new BaseEntityForm(fields, commentRepository))\n}","<script setup>\n    import { computed, onMounted, inject } from 'vue';\n    import formDefFactory from '../../forms/comment_form.js';\n\n    const group = inject('group');\n\n    const props = defineProps({\n        commentManager: {\n            type: Object,\n            required: true\n        },\n        section: {\n            type: [String, null],\n            default: null\n        },\n        subjectType: {\n            type: String,\n            default: 'App\\\\Modules\\\\Group\\\\Models\\\\Group'\n        },\n        subjectId: {\n            type: Number,\n            required: false\n        },\n        comment: {\n            type: Object,\n        },\n        onlyInternal: {\n            type: Boolean,\n            default: false\n        }\n    });\n\n    onMounted(() => {\n        if (props.comment) {\n            formDef.currentItem.value = props.comment\n        }\n    })\n\n    const emits = defineEmits(['saved', 'canceled']);\n\n    const formDef = formDefFactory();\n\n    const fields = computed(() => {\n        const fields = [...formDef.fields.value];\n        if (props.onlyInternal) {\n            const typeFieldIdx = fields.findIndex(f => f.name == 'comment_type_id');\n            fields.splice(typeFieldIdx, 1);\n        }\n        return fields;\n    })\n    const errors = computed(() => {\n        return formDef.errors.value\n    })\n\n    const newComment = computed({\n        get () {\n            return formDef.currentItem.value\n        },\n        set (value) {\n            formDef.currentItem.value = value\n        }\n    })\n\n    const cancel = () => {\n        formDef.clearCurrentItem()\n        formDef.clearErrors()\n        emits('canceled')\n    }\n\n    const create = () => {\n        newComment.value.subject_type = props.subjectType,\n        newComment.value.subject_id = props.subjectId || group.value.id,\n        newComment.value.metadata = {\n            section: props.section,\n            // This metadata is necessary to ensure reply comments are included in notifications.\n            root_subject_type: 'App\\\\Modules\\\\Group\\\\Models\\\\Group',\n            root_subject_id: group.value.id\n        }\n\n        if (props.onlyInternal) {\n            newComment.value.comment_type_id = 1\n        }\n        formDef.save(newComment.value)\n            .then(comment => {\n                props.commentManager.addComment(comment);\n                emits('saved', comment);\n            })\n    }\n\n    const update = () => {\n        if (props.onlyInternal) {\n            newComment.value.comment_type_id = 1\n        }\n        formDef.update(newComment.value)\n            .then(comment => {\n                props.commentManager.updateComment(comment);\n                emits('saved', comment);\n            })\n    }\n\n    const save = () => {\n        if (newComment.value.id) {\n            update();\n            return;\n        }\n        create();\n    }\n</script>\n<template>\n    <div>\n        <data-form :fields=\"fields\" v-model=\"newComment\" :errors=\"errors\"></data-form>\n        <button-row size=\"xs\" submit-text=\"Save\" @submitted=\"save\" @canceled=\"cancel\"></button-row>\n    </div>\n</template>\n","import script from \"./ReviewCommentForm.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ReviewCommentForm.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\n    import {ref, computed, onMounted} from 'vue'\n    import {useStore} from 'vuex'\n    import ReviewCommentForm from './ReviewCommentForm.vue'\n    import commentFormFactory from '@/forms/comment_form.js'\n    import commentRepository from '../../repositories/comment_repository';\n    import DropdownItem from '../DropdownItem.vue';\n    import commentManagerFactory from '@/composables/comment_manager.js'\n    import {hasPermission} from '../../auth_utils';\n\n    const store = useStore();\n\n    const formDef = commentFormFactory();\n    const props = defineProps({\n        comment: {\n            type: Object,\n            required: true\n        },\n        commentManager: {\n            type: Object,\n            required: true\n        }\n    });\n    const emits = defineEmits(['created', 'updated', 'resolved', 'unresolved', 'deleted']);\n\n    const replyManager = ref(commentManagerFactory('App\\\\Models\\\\Comment', props.comment.id))\n\n    const showEditForm = ref(false);\n    const showConfirmDelete = ref(false);\n\n    const getVariant = comment => {\n        if (!comment.type) {\n            return 'gray'\n        }\n        switch (comment.type.name) {\n            case 'required revision':\n                return 'yellow'\n            case 'suggestion':\n                return 'blue'\n            case 'internal comment':\n                return 'gray'\n            default:\n                null\n                break;\n        }\n    }\n\n    const initDelete = () => {\n        showConfirmDelete.value = true\n    }\n    const deleteComment = () => {\n        formDef.destroy(props.comment)\n            .then(() => {\n                showConfirmDelete.value = false;\n                props.commentManager.removeComment(props.comment);\n                emits('deleted', props.comment);\n            })\n    }\n\n    const toggleResolution = async () => {\n        if (props.comment.is_resolved) {\n            const updatedCmt = await commentRepository.unresolve(props.comment.id)\n            props.commentManager.updateComment(updatedCmt)\n            emits('updated');\n            emits('resolved');\n            return;\n        }\n\n        const updatedCmt = await commentRepository.resolve(props.comment.id)\n        props.commentManager.updateComment(updatedCmt)\n        emits('updated');\n        emits('unresolved');\n    }\n\n    const showReplyList = ref(false);\n    const toggleReplies = async () => {\n        if (!showReplyList.value) {\n            showReplies();\n        }\n        showReplyList.value = !showReplyList.value;\n    }\n\n    const showReplies = () => {\n        replyManager.value.getComments()\n            .then(rsp => {\n                showReplyList.value = true;\n                return rsp;\n            });\n    }\n\n    const showReplyForm = ref(false);\n    const initReply = () => showReplyForm.value = true;\n    const handleNewReply = () => {\n        const commentClone = {...props.comment};\n        commentClone.comments_count += 1;\n        props.commentManager.updateComment(commentClone);\n        showReplyList.value = true;\n        showReplyForm.value = false;\n    }\n    const handleReplyRemoved = () => {\n        const commentClone = {...props.comment};\n        commentClone.comments_count -= 1;\n        props.commentManager.updateComment(commentClone);\n    }\n\n    onMounted(() => {\n        replyManager.value.getComments();\n    })\n\n    const canEdit = computed(() => hasPermission('comments-manage') || store.getters.currentUser.person.id == props.comment.creator_id)\n</script>\n<template>\n    <div class=\"my-2\">\n        <div class=\"comment-container\">\n            <div v-if=\"!showEditForm\" class=\"relative\">\n                <div class=\"flex justify-between items-start mb-1 rounded\">\n                    <div class=\"flex space-x-2 items-end\">\n                        <strong class=\"block\">{{comment.creator && comment.creator.name}}</strong>\n                        <badge class=\"block\" :color=\"getVariant(comment)\" size=\"xxs\">\n                            {{comment.type && titleCase(comment.type.name)}}\n                        </badge>\n                        <popper hover arrow content=\"Resolved\" v-if=\"comment.is_resolved\">\n                            <icon-checkmark\n                                class=\"text-green-500\"\n                                title=\"Resolved\"\n                            />\n                        </popper>\n                    </div>\n                    <div class=\"flex space-x-2\">\n                        <dropdown-menu hideCheveron v-if=\"canEdit\">\n                            <dropdown-item @click=\"showEditForm = true\">Edit</dropdown-item>\n                            <dropdown-item @click=\"toggleResolution\">{{comment.is_resolved ? 'Mark unresolved' : 'Resolve'}}</dropdown-item>\n                            <dropdown-item @click=\"initDelete\">Delete</dropdown-item>\n                        </dropdown-menu>\n                    </div>\n                </div>\n\n                <markdown-block :markdown=\"comment.content\" class=\"text-sm\" />\n                <button class=\"link\" @click=\"initReply\"><icon-reply class=\"inline-block\" />Reply</button>\n\n\n                <static-alert variant=\"danger\" v-show=\"showConfirmDelete\" class=\"\">\n                    Continue with delete?\n                    <button-row\n                        size=\"xs\"\n                        submit-text=\"Yes, delete\"\n                        @submitted=\"deleteComment\"\n                        @canceled=\"showConfirmDelete=false\"\n                        submitVariant=\"red\"\n                    ></button-row>\n                </static-alert>\n            </div>\n            <ReviewCommentForm v-else\n                @canceled=\"showEditForm = false\"\n                @saved=\"showEditForm = false\"\n                :comment=\"comment\"\n                :commentManager=\"commentManager\"\n            />\n        </div>\n\n\n        <div class=\"replies ml-1\">\n            <ul v-if=\"showReplyList\">\n                <li v-for=\"reply in replyManager.comments\" :key=\"reply.id\"\n                    class=\"border-l-2 mt-2 px-2 py-1 bg-gray-100 bg-opacity-50\"\n                >\n                    <ReviewComment :comment=\"reply\" :commentManager=\"replyManager\" @deleted=\"handleReplyRemoved\" />\n                </li>\n            </ul>\n            <button class=\"link text-sm\" v-if=\"comment.comments_count > 0\" @click=\"toggleReplies\">\n                {{showReplyList ? 'Hide' : 'Show'}}\n                {{comment.comments_count}}\n                {{comment.comments_count > 1 ? 'replies' : 'reply'}}\n            </button>\n            <div v-show=\"showReplyForm\" class=\"border-l-2 mt-2 px-2 py-1 bg-gray-100 bg-opacity-50\">\n                <strong>Your Reply</strong>\n                <ReviewCommentForm\n                    subjectType=\"App\\Models\\Comment\"\n                    :subjectId=\"comment.id\"\n                    :onlyInternal=\"true\"\n                    :commentManager=\"replyManager\"\n                    @saved=\"handleNewReply\"\n                    @canceled=\"showReplyForm = false\"\n                />\n            </div>\n        </div>\n    </div>\n</template>\n","import script from \"./ReviewComment.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ReviewComment.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\n    import { ref, computed, inject } from 'vue'\n    import ReviewComment from '@/components/expert_panels/ReviewComment.vue'\n    import ReviewCommentForm from './ReviewCommentForm.vue'\n\n    const commentManager = inject('commentManager')\n\n    const props = defineProps({\n        title: {\n            type: String || null,\n            default: null\n        },\n        name: {\n            type: String || null,\n            default: null\n        },\n    });\n\n\n    const showCommentForm = ref(false);\n\n    const showComments = ref(true)\n    const sectionComments = computed(() => {\n        if (!commentManager) {\n            return [];\n        }\n        return commentManager.value.comments.filter(c => {\n            if (c.metadata) {\n                return c.metadata.section == props.name\n            }\n            return false\n        })\n    })\n\n    const countColor = computed(() => {\n        if (!commentManager) {\n            return null;\n        }\n        if (sectionComments.value.find(c => c.type.name == 'required revision')) {\n            return 'yellow'\n        }\n        if (sectionComments.value.find(c => c.type.name == 'suggestion')) {\n            return 'blue'\n        }\n        return 'gray'\n    })\n</script>\n\n<template>\n    <section class=\"lg:flex lg:space-x-4 screen-block\">\n        <div class=\"overflow-x-auto flex-grow\" :class=\"{'lg:w-3/5': showComments}\">\n            <header class=\"flex justify-between items-start space-x-4\">\n                <h2 class=\"flex-grow\" :class=\"{'lg:w-3/5': !showComments}\">{{title}}</h2>\n                <div class=\"flex justify-between items-center lg:w-2/5 px-2 py-1 pb-0 bg-gray-100 rounded-lg\" v-show=\"!showComments\"  v-if=\"commentManager\">\n                    <h3>\n                        <icon-cheveron-right class=\"inline cursor-pointer\" @click=\"showComments = true\"/>\n                        Comments\n                        <badge :color=\"countColor\">{{sectionComments.length}}</badge>\n                    </h3>\n                </div>\n\n            </header>\n            <div>\n                <div>\n                    <slot></slot>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"lg:w-2/5 p-2 bg-gray-100 rounded-lg mb-2\" v-show=\"showComments && commentManager\">\n            <div class=\"flex justify-between items-center\">\n                <h3>\n                    <icon-cheveron-down class=\"inline cursor-pointer\" @click=\"showComments = false\" />\n                    Comments\n                </h3>\n            </div>\n            <ul>\n                <li v-for=\"comment in sectionComments\" :key=\"comment.id\" class=\"bg-white p-2\">\n                    <ReviewComment :comment=\"comment\" :commentManager=\"commentManager\"></ReviewComment>\n                </li>\n            </ul>\n            <div class=\"bg-white mt-2 p-2\">\n                <ReviewCommentForm v-if=\"showCommentForm\"\n                    :section=\"name\"\n                    :commentManager=\"commentManager\"\n                    @saved=\"showCommentForm = false\"\n                    @canceled=\"showCommentForm = false\"\n                />\n                <button v-else class=\"btn btn-xs block\" @click=\"showCommentForm = true\">Add comment</button>\n            </div>\n        </div>\n    </section>\n</template>\n","import script from \"./ReviewSection.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ReviewSection.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\n    import EvidenceSummaryList from '@/components/expert_panels/EvidenceSummaryList.vue'\n    import {computed, watch } from 'vue'\n    import {useStore} from 'vuex'\n    import ReviewSection from '@/components/expert_panels/ReviewSection.vue'\n\n    const store = useStore();\n    const group = computed(() => store.getters['groups/currentItemOrNew'])\n    const expertPanel = computed(() => group.value.expert_panel)\n\n    watch(() => group.value, (to, from) => {\n        if ((to.id && (!from || to.id != from.id))) {\n            store.dispatch('groups/getEvidenceSummaries', group.value);\n        }\n    });\n</script>\n\n<template>\n    <div class=\"application-review p-2 bg-gray-100\">\n            <ReviewSection\n                v-if=\"expertPanel.has_approved_pilot\"\n                title=\"Plans for Ongoing Review and Discrepancy Resolution\"\n                name=\"discrepency-review\"\n            >\n                <dictionary-row label=\"Selected protocol\" labelWidthClass=\"w-48 font-bold\">\n                    <div class=\"w-full\">\n                        {{expertPanel.curation_review_protocol ? titleCase(expertPanel.curation_review_protocol.full_name) : null}}\n                        <p v-if=\"expertPanel.curation_review_protocol_id == 100\" class=\"mt-1\">\n                            <em>Details:</em> {{expertPanel.curation_review_protocol_other}}\n                        </p>\n                    </div>\n                </dictionary-row>\n                <dictionary-row label=\"Notes\" labelWidthClass=\"w-48 font-bold\">\n                    <markdown-block :markdown=\"expertPanel.curation_review_process_notes\" />\n                </dictionary-row>\n            </ReviewSection>\n\n            <ReviewSection v-if=\"expertPanel.has_approved_pilot\"\n                title=\"Evidence Summaries\"\n                name=\"evidence-summaries\"\n            >\n                <evidence-summary-list :readonly=\"true\" />\n            </ReviewSection>\n\n            <ReviewSection v-if=\"expertPanel.has_approved_pilot\"\n                title=\"Core Approval Member, Trained Biocurator, and Biocurator Trainer Designation\"\n                name=\"member-designation\"\n            >\n                <dictionary-row label=\"Core Approval Members\" labelWidthClass=\"w-48 font-bold\">\n                    {{group.coreApprovalMembers.map(m => m.person.name).join(', ')}}\n                </dictionary-row>\n                <dictionary-row label=\"Biocurator Trainers\" labelWidthClass=\"w-48 font-bold\">\n                    {{group.biocuratorTrainers.map(m => m.person.name).join(', ')}}\n                </dictionary-row>\n                <dictionary-row label=\"Trained Biocurators\" labelWidthClass=\"w-48 font-bold\">\n                    {{group.trainedBiocurators.map(m => m.person.name).join(', ')}}\n                </dictionary-row>\n            </ReviewSection>\n\n            <!-- <div v-if=\"!expertPanel.has_appoved_pilot\" class=\"screen-block\">\n                No approved pilot.\n            </div> -->\n    </div>\n</template>\n","import script from \"./SustainedCurationReview.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./SustainedCurationReview.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["types","internal","suggestion","requirement","subjectType","subjectId","comments","ref","openComments","computed","value","filter","c","is_resolved","openRequirements","comment_type_id","openSuggestions","commentsForEp","openInternal","findCommentIndex","comment","findIndex","id","getComments","async","commentRepository","where","subject_type","subject_id","addComment","push","removeComment","splice","updateComment","subject","type","BaseRepository","constructor","baseUrl","options","this","query","params","queryString","queryStringFromParams","api","then","response","transformToEntity","data","find","save","update","destroy","item","entityClass","Array","isArray","map","i","resolve","unresolve","loadPubmed","hasPermission","fields","members","chairs","tableRows","m","roles","includes","experts","memberGroups","title","delay","ms","Promise","r","setTimeout","getPublications","baseUri","searchUrl","member","last_name","first_name","axios","rsp","pubCount","esearchresult","count","catch","error","status","watch","props","to","sort","a","b","idx","immediate","retVal","person","name","institution","legacy_credentials","legacy_expertise","join","coi_completed","formatDate","coi_last_completed","__exports__","store","useStore","group","getters","expertPanel","expert_panel","basicInfo","toUpperCase","long_base_name","short_base_name","BaseEntityForm","repository","repo","currentItem","originalItem","errors","clearErrors","newItem","clearCurrentItem","e","isValidationError","cancel","CommentTypeRepository","super","cachedList","results","Error","typeRepository","commentTypes","getCommentTypes","items","label","required","inject","onMounted","formDef","formDefFactory","onlyInternal","typeFieldIdx","f","newComment","get","set","emits","create","metadata","section","root_subject_type","root_subject_id","commentManager","commentFormFactory","replyManager","commentManagerFactory","showEditForm","showConfirmDelete","getVariant","initDelete","deleteComment","toggleResolution","updatedCmt","showReplyList","toggleReplies","showReplies","showReplyForm","initReply","handleNewReply","commentClone","comments_count","handleReplyRemoved","canEdit","currentUser","creator_id","showCommentForm","showComments","sectionComments","countColor","from","dispatch"],"sourceRoot":""}