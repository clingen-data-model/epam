{"version":3,"sources":["webpack:///./src/views/ResetPassword.vue","webpack:///./src/views/ResetPassword.vue?15a1"],"names":["class","title","successMessage","email","type","label","errors","hasToken","password","password_confirmation","show-cancel","submit-text","submitReset","props","data","computed","Boolean","this","$route","query","token","methods","getResetLink","api","post","then","response","status","catch","error","is_validation_error","submitNewPassword","$store","dispatch","$router","replace","render"],"mappings":"kJAEaA,MAAM,mE,yMADf,yBAUO,GAVDC,MAAM,sBAAsBD,MAAM,iB,+BACpC,iBAEM,CAF6E,EAAAE,gB,yBAAnF,gCAEM,MAFN,EAEM,6BADA,EAAAA,gBAAc,K,yBAEpB,gCAKM,SAJF,yBAAwF,G,WAApE,EAAAC,M,qDAAA,EAAAA,MAAK,IAAEC,KAAK,OAAOC,MAAM,QAASC,OAAQ,EAAAA,OAAOH,O,gCAC8B,EAAAI,U,yBAAnG,yBAAyH,G,iBAArG,EAAAC,S,qDAAA,EAAAA,SAAQ,IAAEJ,KAAK,WAAWC,MAAM,eAAgBC,OAAQ,EAAAA,OAAOE,U,wEAC8C,EAAAD,U,yBAAjI,yBAAuJ,G,iBAAnI,EAAAE,sB,qDAAA,EAAAA,sBAAqB,IAAEL,KAAK,WAAWC,MAAM,mBAAoBC,OAAQ,EAAAA,OAAOG,uB,wEACpG,yBAAkH,GAArGC,eAAa,EAAOC,cAAY,2BAA4B,gBAAe,EAAAC,a,yFAOrF,GACXC,MAAO,GAGPC,KAJW,WAKP,MAAO,CACHX,MAAO,KACPG,OAAQ,GACRE,SAAU,KACVC,sBAAuB,KACvBP,eAAgB,OAGxBa,SAAU,CACNR,SADM,WAEF,OAAOS,QAAQC,KAAKC,OAAOC,MAAMC,SAGzCC,QAAS,CACLC,aADK,WACU,WACXC,EAAA,KAAIC,KAAK,gCAAiC,CAACrB,MAAOc,KAAKd,QAClDsB,MAAK,SAAAC,GACF,EAAKxB,eAAiBwB,EAASZ,KAAKa,UAEvCC,OAAM,SAAAC,GACC,OAAAC,EAAA,MAAoBD,KACpB,EAAKvB,OAASuB,EAAMH,SAASZ,KAAKR,YAIlDyB,kBAZK,WAYgB,WACXjB,EAAO,CACTM,MAAOH,KAAKC,OAAOC,MAAMC,MACzBjB,MAAOc,KAAKd,MACZK,SAAUS,KAAKT,SACfC,sBAAuBQ,KAAKR,uBAGhCc,EAAA,KAAIC,KAAK,sBAAuBV,GAC3BW,MAAK,WACF,EAAKO,OAAOC,SAAS,QAAS,CAAC9B,MAAO,EAAKA,MAAOK,SAAU,EAAKA,WAC5DiB,MAAK,WACF,EAAKO,OAAOC,SAAS,kBACrB,EAAKC,QAAQC,QAAQ,WAGhCP,OAAM,SAAAC,GACC,OAAAC,EAAA,MAAoBD,KACpB,EAAKvB,OAASuB,EAAMH,SAASZ,KAAKR,YAIlDM,YAlCK,WAmCGK,KAAKV,SACLU,KAAKc,oBAITd,KAAKK,kBCvEjB,EAAOc,OAASA,EAED","file":"js/reset-password.464d24c5.js","sourcesContent":["<template>\n    <card title=\"Reset Your Password\" class=\"w-2/3 mx-auto\">\n        <div class=\"p-2 rounded border border-green-300 bg-green-100 text-green-700\" v-if=\"successMessage\">\n            {{successMessage}}\n        </div>\n        <div v-else>\n            <input-row v-model=\"email\" type=\"text\" label=\"Email\" :errors=\"errors.email\"></input-row>\n            <input-row v-model=\"password\" type=\"password\" label=\"New password\" :errors=\"errors.password\" v-if=\"hasToken\"></input-row>\n            <input-row v-model=\"password_confirmation\" type=\"password\" label=\"Confirm password\" :errors=\"errors.password_confirmation\" v-if=\"hasToken\"></input-row>\n            <button-row :show-cancel=\"false\" submit-text=\"Send Password Reset Link\" @submitClicked=\"submitReset\"></button-row>\n        </div>\n    </card>\n</template>\n<script>\nimport api from '../http/api'\nimport is_validation_error from '../http/is_validation_error'\nexport default {\n    props: {\n        \n    },\n    data() {\n        return {\n            email: null,\n            errors: {},\n            password: null,\n            password_confirmation: null,\n            successMessage: null\n        }\n    },\n    computed: {\n        hasToken () {\n            return Boolean(this.$route.query.token)\n        }\n    },\n    methods: {\n        getResetLink() {\n            api.post('/api/send-reset-password-link', {email: this.email})\n                .then(response => {\n                    this.successMessage = response.data.status;\n                })\n                .catch(error => {\n                    if (is_validation_error(error)) {\n                        this.errors = error.response.data.errors\n                    }\n                });\n        },\n        submitNewPassword () {\n            const data = {\n                token: this.$route.query.token,\n                email: this.email,\n                password: this.password,\n                password_confirmation: this.password_confirmation,\n            };\n\n            api.post('/api/reset-password', data)\n                .then(() => {\n                    this.$store.dispatch('login', {email: this.email, password: this.password})\n                        .then(() => {\n                            this.$store.dispatch('getCurrentUser');\n                            this.$router.replace('/');\n                        })\n                })\n                .catch(error => {\n                    if (is_validation_error(error)) {\n                        this.errors = error.response.data.errors\n                    }\n                })\n        },\n        submitReset() {\n            if (this.hasToken) {\n                this.submitNewPassword()\n                return;\n            }\n\n            this.getResetLink();\n        }\n    }\n}\n</script>","import { render } from \"./ResetPassword.vue?vue&type=template&id=7cf8b14e\"\nimport script from \"./ResetPassword.vue?vue&type=script&lang=js\"\nexport * from \"./ResetPassword.vue?vue&type=script&lang=js\"\nscript.render = render\n\nexport default script"],"sourceRoot":""}