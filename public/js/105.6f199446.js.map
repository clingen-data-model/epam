{"version":3,"file":"js/105.6f199446.js","mappings":"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","sources":["webpack://epam/./src/composables/comment_manager.js","webpack://epam/./src/forms/base_entity_form.js","webpack://epam/./src/repositories/comment_type_repository.js","webpack://epam/./src/forms/comment_form.js","webpack://epam/./src/repositories/base_repository.js","webpack://epam/./src/repositories/comment_repository.js","webpack://epam/./src/components/expert_panels/ReviewMembership.vue","webpack://epam/./src/components/expert_panels/ReviewMembership.vue?a42d","webpack://epam/./src/components/expert_panels/DefinitionReview.vue","webpack://epam/./src/components/expert_panels/DefinitionReview.vue?c6b1","webpack://epam/./src/components/expert_panels/ReviewCommentForm.vue","webpack://epam/./src/components/expert_panels/ReviewCommentForm.vue?1f84","webpack://epam/./src/components/expert_panels/ReviewComment.vue","webpack://epam/./src/components/expert_panels/ReviewComment.vue?cf11","webpack://epam/./src/components/expert_panels/ReviewSection.vue","webpack://epam/./src/components/expert_panels/ReviewSection.vue?09ef","webpack://epam/./src/components/expert_panels/SustainedCurationReview.vue","webpack://epam/./src/components/expert_panels/SustainedCurationReview.vue?406d"],"sourcesContent":["import {ref, computed} from 'vue'\nimport commentRepository from '../repositories/comment_repository';\n\nconst types = {\n    internal: 1,\n    suggestion: 2,\n    requirement: 3\n};\n\nexport default (subjectType, subjectId) => {\n    const comments = ref([]);\n\n    const openComments = computed(() => comments.value.filter(c => !c.is_resolved))\n    const openRequirements = computed(() => openComments.value.filter(c =>  c.comment_type_id == types.requirement));\n    const openSuggestions = computed(() => openComments.value.filter(c =>  c.comment_type_id == types.suggestion));\n    const commentsForEp = computed(() => [...openRequirements.value, ...openSuggestions.value])\n    const openInternal = computed(() => openComments.value.filter(c => c.comment_type_id == types.internal));\n\n    const findCommentIndex = (comment) => {\n        return comments.value.findIndex(c => c.id == comment.id)\n    }\n\n    const getComments = async () => {\n        comments.value = await commentRepository.query({where: {\n            subject_type: subjectType,\n            subject_id: subjectId\n        }})\n    }\n\n    const addComment = (comment) => comments.value.push(comment);\n    const removeComment = (comment) => comments.value.splice(findCommentIndex(comment), 1);\n    const updateComment = (comment) => comments.value[findCommentIndex(comment)] = comment;\n\n    return {\n        subject: {\n            type: subjectType,\n            id: subjectId\n        },\n        comments,\n        openComments,\n        openRequirements,\n        openSuggestions,\n        openInternal,\n        getComments,\n        addComment,\n        removeComment,\n        updateComment,\n        commentsForEp\n    }\n}\n","import {ref} from 'vue';\nimport {isValidationError} from '@/http'\n\nclass BaseEntityForm {\n    constructor(fields, repository) {\n        this.fields = fields;\n        this.repo = repository\n        \n        this.currentItem = ref({})\n        this.originalItem = ref({})\n        this.errors = ref({})\n    }\n\n     async find (id) {\n        return await this.repo.find(id)\n            .then(data => {\n                this.currentItem.value = data\n                this.originalItem.value = data\n                return data\n            });\n    }\n\n     async save (data) {\n        this.clearErrors()\n        try {\n            const newItem = await this.repo.save(data)\n            this.clearCurrentItem()\n            return newItem;\n        } catch (e) {\n            if (isValidationError(e)) {\n                this.errors.value = e.response.data.errors\n            }\n            throw e\n        }\n    }\n    \n     async update (data) {\n        this.clearErrors()\n        try {\n            this.currentItem.value = this.repo.update(data)\n            return this.currentItem.value\n        } catch (e) {\n            if (isValidationError(e)) {\n                this.errors.value = e.response.data.errors\n            }\n            throw e\n        }\n    }\n    \n     async destroy (item) {\n        this.repo.destroy(item)\n    }\n    \n    cancel () {\n        this.clearErrors()\n        if (!this.currentItem.value.id) {\n            this.clearCurrentItem()\n            return;\n        }\n    }\n    \n    clearCurrentItem () {\n        this.currentItem.value = {}\n    }\n    \n    clearErrors () {\n        this.errors.value = {}\n    }\n}\n\nexport default BaseEntityForm","import BaseRepository from './base_repository.js'\n\nclass CommentTypeRepository extends BaseRepository\n{\n    constructor (baseUrl, options = {}) {\n        super(baseUrl, options);\n        this.cachedList = null;\n    }\n\n    query (params) {\n        if (!this.cachedList) {\n            const results = super.query(params)\n            this.cachedList = results;\n        }\n\n        return this.cachedList\n    }\n    \n    // eslint-disable-next-line\n    find (id) {\n        throw Error('CommentTypeRepository.find not implemented');\n    }\n\n    // eslint-disable-next-line\n    save (data) {\n        throw Error('CommentTypeRepository.save not implemented');\n    }\n\n    // eslint-disable-next-line\n    update (id) {\n        throw Error('CommentTypeRepository.update not implemented');\n    }\n\n    // eslint-disable-next-line\n    destroy (id) {\n        throw Error('CommentTypeRepository.destroy not implemented');\n    }\n}\n\nexport const typeRepository = (new CommentTypeRepository('/api/comment-types'));\nexport default typeRepository","import {ref} from 'vue'\nimport BaseEntityForm from \"./base_entity_form.js\";\nimport commentRepository from '@/repositories/comment_repository.js'\nimport typeRepository from '@/repositories/comment_type_repository.js'\n\nexport const commentTypes = ref([]);\nexport const getCommentTypes = async () => {\n    return await typeRepository.query()\n            .then(items => {\n                commentTypes.value = items.map(i => ({label: i.name, value: i.id}));\n                return commentTypes.value;\n            });\n};\n\nexport const fields = ref([\n    {\n        name: 'comment_type_id',\n        label: 'Type',\n        type: 'select',\n        options: commentTypes,\n        required: true,\n    },\n    {\n        name: 'content',\n        label: 'Comment',\n        type: 'large-text',\n        required: true,\n    },\n]);\n\n\nexport default () => {\n    getCommentTypes();\n\n    return (new BaseEntityForm(fields, commentRepository))\n}","import { api, queryStringFromParams } from '@/http'\n\nexport default class BaseRepository {\n    constructor (baseUrl, options = {}) {\n        this.baseUrl = baseUrl\n        this.options = options\n    }\n\n    query (params) {\n        const queryString = queryStringFromParams(params)\n        return api.get(this.baseUrl+queryString).then(response =>  this.transformToEntity(response.data))\n    }\n\n    find (id) {\n        return api.get(`${this.baseUrl}/${id}`).then(response => this.transformToEntity(response.data))\n    }\n\n     save (data) {\n        return api.post(this.baseUrl, data).then(response => this.transformToEntity(response.data))\n    }\n    \n     update (data) {\n        return api.put(`${this.baseUrl}/${data.id}`, data).then(response => this.transformToEntity(response.data))\n    }\n    \n     destroy (item) {\n        return api.delete(`${this.baseUrl}/${item.id}`)\n    }\n\n    transformToEntity(item) {\n        if (!this.options.entityClass) {\n            return item;\n        }\n\n        if (Array.isArray(item)) {\n            return item.map(i => new this.options.entityClass(i))\n        }\n        return item;\n    }\n}","import BaseRepository from './base_repository.js'\nimport {api} from '@/http'\n\n\nconst commentRepository = (new BaseRepository('/api/comments'));\ncommentRepository.resolve = (id) => {\n    return api.post(`/api/comments/${id}/resolved`)\n            .then(response => response.data);\n}\ncommentRepository.unresolve = (id) => {\n    return api.post(`/api/comments/${id}/unresolved`)\n            .then(response => response.data);\n}\n\nexport {commentRepository};\n\nexport default commentRepository;\n","<script setup>\n    import { computed, ref, watch } from 'vue'\n    import axios from 'axios'\nimport {hasPermission} from '../../auth_utils';\n\n    const props = defineProps({\n        members: {\n            required: true,\n            type: Array\n        },\n    });\n\n    const loadPubmed = computed(() => hasPermission('ep-applications-approve'))\n\n    const fields = ref(['name', 'credentials', 'expertise', 'institution']);\n    if (hasPermission('ep-applications-manage')) {\n        fields.value.push('coi_completed');\n    }\n\n    const members = ref([]);\n    const chairs = computed(() => members.value.filter(m => m.roles.includes('chair')));\n    const experts = computed(() => members.value.filter(m => m.roles.includes('expert')));\n\n    const memberGroups = computed(() => [\n        {\n            title: 'Leadership',\n            members: chairs.value\n        },\n        {\n            title: 'Coordination',\n            members: members.value.filter(m => m.roles.includes('coordinator'))\n        },\n        {\n            title: 'Biocuration',\n            members: members.value.filter(m => m.roles.includes('biocurator'))\n        },\n        {\n            title: 'Expertise',\n            members: experts.value\n        }\n    ])\n\n    const delay = (ms = 1000) => new Promise((r) => setTimeout(r, ms));\n    const getPublications = async member => {\n        const baseUri = 'https://eutils.ncbi.nlm.nih.gov/entrez/eutils';\n        const searchUrl = `${baseUri}/esearch.fcgi?db=pubmed&term=${member.last_name},+${member.first_name}[author]&retmode=json&retmax=0`;\n        const entriesUrl = `${baseUri}/esummary.fcgi?db=pubmed&retmode=json`\n\n        return axios.get(searchUrl)\n            .then(rsp => {\n                member.pubCount = rsp.data.esearchresult.count\n            })\n            .catch(async error => {\n                console.log(error);\n                if (error.response.status == 429) {\n                    console.log('wait and try again')\n                    await delay();\n                    getPublications(member);\n                }\n            });\n    }\n\n    watch(() => props.members, async to => {\n        if (!to) {\n            return;\n        }\n\n        members.value = [...to];\n\n        members.value.sort((a, b) => {\n            if (a.roles.includes('chair') && !b.roles.includes('chair')) {\n                return -1;\n            }\n            if (!a.roles.includes('chair') && b.roles.includes('chair')) {\n                return 1;\n            }\n\n            if (a.roles.includes('expert') && !b.roles.includes('expert')) {\n                return -1;\n            }\n            if (!a.roles.includes('expert') && b.roles.includes('expert')) {\n                return 1;\n            }\n\n            return 0;\n        })\n\n        for(let idx in members.value.filter(m => m.roles.includes('chair') || m.roles.includes('expert'))) {\n            if (loadPubmed.value) {\n                getPublications(members.value[idx])\n                await delay(500);\n            }\n        }\n    }, {immediate: true})\n\n</script>\n<template>\n    <div>\n        <table>\n            <template v-for=\"g in memberGroups\" :key=\"g.title\">\n                <thead>\n                    <tr>\n                        <th colspan=\"6\" class=\"bg-white border-0 pl-0 pb-1 pt-3\">\n                            <span class=\"text-lg\">{{g.title}}</span>\n                            &nbsp;\n                            <badge size=\"xxs\">{{g.members.length}}</badge>\n                        </th>\n                    </tr>\n                    <tr class=\"text-sm\">\n                        <th v-for=\"key in fields\" :key=\"key\">\n                            {{key}}\n                        </th>\n                        <th>Publications</th>\n                    </tr>\n                </thead>\n                <tbody class=\"text-sm\">\n                    <tr v-for=\"m in g.members\" :key=\"m.id\">\n                        <td v-for=\"key in fields\" :key=\"key\">\n                            {{m[key]}}\n                        </td>\n                        <td>\n                            <!-- <popper v-if=\"m.pubCount\" arrow hover class=\"cursor-pointer\">\n                                <template v-slot:content>\n                                    <h5>Publications</h5>\n                                    <div v-if=\"m.pubCount == 0\">\n                                        None.\n                                    </div>\n                                    <div v-else>\n                                        <ul class=\"list-disc ml-4\">\n                                            <li v-for=\"pub in m.publications\" :key=\"pub.uid\" class=\"mb-1\">\n                                                <a :href=\"`https://pubmed.ncbi.nlm.nih.gov/${pub.uid}`\" target=\"pubmed\" class=\"text-black\">\n                                                    <PubmedCitation :summary=\"pub\" />\n                                                </a>\n                                            </li>\n                                        </ul>\n                                        <a v-if=\"m.pubCount > 10\"\n                                            :href=\"`https://pubmed.ncbi.nlm.nih.gov/?term=${m.last_name},+${m.first_name}%5BAuthor%5D`\"\n                                            target=\"pubmed\"\n                                        >+{{m.pubCount - 10}} more.</a>\n                                    </div>\n                                </template>\n                                <badge size=\"xxs\">{{m.pubCount}}</badge>\n                            </popper> -->\n                            <div v-if=\"m.pubCount\">\n                                <popper v-if=\"m.pubCount > 0\" content=\"Go to PubMed results.\" hover arrow placement=\"left\">\n                                    <a :href=\"`https://pubmed.ncbi.nlm.nih.gov/?term=${m.last_name},+${m.first_name}%5BAuthor%5D`\"\n                                        target=\"pubmed\"\n                                        >\n                                        <badge size=\"xxs\">{{m.pubCount}}</badge>\n                                    </a>\n                                </popper>\n                                <badge v-else size=\"xxs\">{{m.pubCount}}</badge>\n                            </div>\n                            <button v-else class=\"btn btn-xs\" @click=\"getPublications(m)\">Get</button>\n                        </td>\n                    </tr>\n                </tbody>\n            </template>\n        </table>\n    </div>\n</template>\n","import script from \"./ReviewMembership.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ReviewMembership.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\n    import {useStore} from 'vuex';\n    import { computed} from 'vue'\n    import ReviewSection from '@/components/expert_panels/ReviewSection.vue'\n    import ReviewMembership from '@/components/expert_panels/ReviewMembership.vue'\n    import { formatDate } from '@/date_utils'\nimport {hasPermission} from '../../auth_utils';\n\n    const store = useStore();\n    const group = computed(() => store.getters['groups/currentItemOrNew'])\n    const expertPanel = computed(() => group.value.expert_panel);\n    const members = computed( () => {\n        if (!group.value) {\n            return [];\n        }\n        return group.value.members.map(m => {\n            const retVal = {\n                id: m.id,\n                first_name: m.person.first_name,\n                last_name: m.person.last_name,\n                name: m.person.name,\n                institution: m.person.institution ? m.person.institution.name : null,\n                credentials: m.person.credentials,\n                expertise: m.expertise,\n                roles: m.roles.map(r => r.name).join(', '),\n            }\n            if (hasPermission('ep-applications-manage')) {\n                retVal.coi_completed = formatDate(m.coi_last_completed);\n            }\n\n            return retVal;\n        });\n    });\n\n    const basicInfo = computed(() => {\n        return {\n            type: group.value.type.name ? group.value.type.name.toUpperCase() : '',\n            long_base_name: expertPanel.value.long_base_name,\n            short_base_name: expertPanel.value.short_base_name,\n        }\n    });\n</script>\n\n<template>\n    <div class=\"space-y-4\">\n        <ReviewSection title=\"Basic Information\" name=\"basic-info\">\n            <object-dictionary :obj=\"basicInfo\" label-class=\"w-40 font-bold\" />\n            <dictionary-row label=\"CDWG\" label-class=\"w-40 font-bold\">\n                {{group.parent ?  group.parent.name : '--'}}\n            </dictionary-row>\n        </ReviewSection>\n\n        <ReviewSection title=\"Membership\" name=\"membership\">\n            <!-- {{members}} -->\n            <ReviewMembership :members=\"members\" />\n\n            <div v-if=\"group.isVcep()\" class=\"mt-6\">\n                <h4>Expertise of VCEP members</h4>\n                <blockquote>\n                    <markdown-block :markdown=\"expertPanel.membership_description\" />\n                </blockquote>\n            </div>\n        </ReviewSection>\n\n        <ReviewSection title=\"Scope\" name=\"scope\">\n            <h3>Genes</h3>\n            <div class=\"mb-6\">\n                <p v-if=\"group.isGcep()\">{{expertPanel.genes.map(g => g.gene_symbol).join(', ')}}</p>\n                <simple-table\n                    v-if=\"group.isVcep()\"\n                    :data=\"expertPanel.genes.map(g => ({id: g.id,gene: g.gene_symbol, disease: g.disease_name}))\" :key-by=\"'id'\"\n                    :hide-columns=\"['id']\"\n                />\n            </div>\n\n            <h3>Description of scope</h3>\n            <blockquote><markdown-block :markdown=\"expertPanel.scope_description\" /></blockquote>\n        </ReviewSection>\n\n        <ReviewSection v-if=\"group.isGcep()\" title=\"Plans\" name=\"plans\">\n            <dictionary-row label=\"Selected protocol\" label-class=\"w-48 font-bold\">\n                <div class=\"flex-none\">\n                    {{expertPanel.curation_review_protocol ? titleCase(expertPanel.curation_review_protocol.full_name) : null}}\n                    <p v-if=\"expertPanel.curation_review_protocol_id == 100\" class=\"mt-1\">\n                        <em>Details:</em> {{expertPanel.curation_review_protocol_other}}\n                    </p>\n                </div>\n            </dictionary-row>\n        </ReviewSection>\n\n        <ReviewSection v-if=\"group.isGcep()\" title=\"Attestations\" name=\"attestations\">\n            <dictionary-row label=\"GCEP Attestation Signed\" label-class=\"w-52 font-bold\">\n                {{formatDate(expertPanel.gcep_attestation_date)}}\n            </dictionary-row>\n            <dictionary-row label=\"GCI Training Date\" label-class=\"w-52 font-bold\">\n                {{formatDate(expertPanel.gci_training_date)}}\n            </dictionary-row>\n            <dictionary-row label=\"NHGRI Attestation Signed\" label-class=\"w-52 font-bold\">\n                {{formatDate(expertPanel.nhgri_attestation_date)}}\n            </dictionary-row>\n        </ReviewSection>\n\n        <ReviewSection v-if=\"group.isVcep()\" title=\"Attestations\" name=\"attestations\">\n            <dictionary-row\n                label=\"Reanalysis and Descrepency Resolution Attestation Signed\"\n                label-class=\"w-52 font-bold\"\n            >\n                {{formatDate(expertPanel.reanalysis_attestation_date)}}\n            </dictionary-row>\n            <dictionary-row label=\"NHGRI Attestation Signed\" label-class=\"w-60 font-bold\">\n                {{formatDate(expertPanel.nhgri_attestation_date)}}\n            </dictionary-row>\n        </ReviewSection>\n    </div>\n</template>\n","import script from \"./DefinitionReview.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./DefinitionReview.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\n    import { computed, onMounted, inject } from 'vue';\n    import formDefFactory from '../../forms/comment_form.js';\n\n    const group = inject('group');\n\n    const props = defineProps({ \n        commentManager: {\n            type: Object,\n            required: true\n        },\n        section: {\n            type: [String, null], \n            default: null\n        },\n        subjectType: { \n            type: String, \n            default: 'App\\\\Modules\\\\Group\\\\Models\\\\Group'\n        },\n        subjectId: {\n            type: Number,\n            required: false\n        },\n        comment: {\n            type: Object,\n        },\n        onlyInternal: {\n            type: Boolean,\n            default: false\n        }\n    });\n\n    onMounted(() => {\n        if (props.comment) {\n            formDef.currentItem.value = props.comment\n        }\n    })\n\n    const emits = defineEmits(['saved', 'canceled']);\n\n    const formDef = formDefFactory();\n\n    const fields = computed(() => {\n        const fields = [...formDef.fields.value];\n        if (props.onlyInternal) {\n            const typeFieldIdx = fields.findIndex(f => f.name == 'comment_type_id');\n            fields.splice(typeFieldIdx, 1);\n        }\n        return fields;\n    })\n    const errors = computed(() => {\n        return formDef.errors.value\n    })\n\n    const newComment = computed({\n        get () {\n            return formDef.currentItem.value\n        },\n        set (value) {\n            formDef.currentItem.value = value\n        }\n    })\n\n    const cancel = () => {\n        formDef.clearCurrentItem()\n        formDef.clearErrors()\n        emits('canceled')\n    }\n\n    const create = () => {\n        newComment.value.subject_type = props.subjectType,\n        newComment.value.subject_id = props.subjectId || group.value.id,\n        newComment.value.metadata = {section: props.section}\n        if (props.onlyInternal) {\n            newComment.value.comment_type_id = 1\n        }\n        formDef.save(newComment.value)\n            .then(comment => {\n                props.commentManager.addComment(comment);\n                emits('saved', comment);\n            })\n    }\n\n    const update = () => {\n        if (props.onlyInternal) {\n            newComment.value.comment_type_id = 1\n        }\n        formDef.update(newComment.value)\n            .then(comment => {\n                props.commentManager.updateComment(comment);\n                emits('saved', comment);\n            })\n    }\n\n    const save = () => {\n        if (newComment.value.id) {\n            update();\n            return;\n        }\n        create();\n    }\n</script>\n<template>\n    <div>\n        <data-form :fields=\"fields\" v-model=\"newComment\" :errors=\"errors\"></data-form>\n        <button-row size=\"xs\" submit-text=\"Save\" @submitted=\"save\" @canceled=\"cancel\"></button-row>\n    </div>\n</template>","import script from \"./ReviewCommentForm.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ReviewCommentForm.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\n    import {ref, computed, onMounted} from 'vue'\n    import {useStore} from 'vuex'\n    import ReviewCommentForm from './ReviewCommentForm.vue'\n    import commentFormFactory from '@/forms/comment_form.js'\n    import commentRepository from '../../repositories/comment_repository';\n    import DropdownItem from '../DropdownItem.vue';\n    import commentManagerFactory from '@/composables/comment_manager.js'\n    import {hasPermission} from '../../auth_utils';\n\n    const store = useStore();\n\n    const formDef = commentFormFactory();\n    const props = defineProps({\n        comment: {\n            type: Object,\n            required: true\n        },\n        commentManager: {\n            type: Object,\n            required: true\n        }\n    });\n    const emits = defineEmits(['created', 'updated', 'resolved', 'unresolved', 'deleted']);\n\n    const replyManager = ref(commentManagerFactory('App\\\\Models\\\\Comment', props.comment.id))\n\n    const showEditForm = ref(false);\n    const showConfirmDelete = ref(false);\n\n    const getVariant = comment => {\n        if (!comment.type) {\n            return 'gray'\n        }\n        switch (comment.type.name) {\n            case 'required revision':\n                return 'yellow'\n            case 'suggestion':\n                return 'blue'\n            case 'internal comment':\n                return 'gray'\n            default:\n                null\n                break;\n        }\n    }\n\n    const initDelete = () => {\n        showConfirmDelete.value = true\n    }\n    const deleteComment = () => {\n        formDef.destroy(props.comment)\n            .then(() => {\n                showConfirmDelete.value = false;\n                props.commentManager.removeComment(props.comment);\n                emits('deleted', props.comment);\n            })\n    }\n\n    const toggleResolution = async () => {\n        if (props.comment.is_resolved) {\n            const updatedCmt = await commentRepository.unresolve(props.comment.id)\n            props.commentManager.updateComment(updatedCmt)\n            emits('updated');\n            emits('resolved');\n            return;\n        }\n\n        const updatedCmt = await commentRepository.resolve(props.comment.id)\n        props.commentManager.updateComment(updatedCmt)\n        emits('updated');\n        emits('unresolved');\n    }\n\n    const showReplyList = ref(false);\n    const toggleReplies = async () => {\n        if (!showReplyList.value) {\n            showReplies();\n        }\n        showReplyList.value = !showReplyList.value;\n    }\n\n    const showReplies = () => {\n        replyManager.value.getComments()\n            .then(rsp => {\n                showReplyList.value = true;\n                return rsp;\n            });\n    }\n\n    const showReplyForm = ref(false);\n    const initReply = () => showReplyForm.value = true;\n    const handleNewReply = (newReply) => {\n        const commentClone = {...props.comment};\n        commentClone.comments_count += 1;\n        props.commentManager.updateComment(commentClone);\n        // showReplies();\n        showReplyList.value = true;\n        showReplyForm.value = false;\n    }\n    const handleReplyRemoved = (comment) => {\n        const commentClone = {...props.comment};\n        commentClone.comments_count -= 1;\n        props.commentManager.updateComment(commentClone);\n    }\n\n    onMounted(() => {\n        replyManager.value.getComments();\n    })\n\n    const canEdit = computed(() => hasPermission('comments-manage') || store.getters.currentUser.person.id == props.comment.creator_id)\n</script>\n<template>\n    <div class=\"my-2\">\n        <div class=\"comment-container\">\n            <div v-if=\"!showEditForm\" class=\"relative\">\n                <div class=\"flex justify-between items-start mb-1 rounded\">\n                    <div class=\"flex space-x-2 items-end\">\n                        <strong class=\"block\">{{comment.creator && comment.creator.name}}</strong>\n                        <badge class=\"block\" :color=\"getVariant(comment)\" size=\"xxs\">\n                            {{comment.type && titleCase(comment.type.name)}}\n                        </badge>\n                        <popper hover arrow content=\"Resolved\" v-if=\"comment.is_resolved\">\n                            <icon-checkmark\n                                class=\"text-green-500\"\n                                title=\"Resolved\"\n                            />\n                        </popper>\n                    </div>\n                    <div class=\"flex space-x-2\">\n                        <dropdown-menu hideCheveron v-if=\"canEdit\">\n                            <dropdown-item @click=\"showEditForm = true\">Edit</dropdown-item>\n                            <dropdown-item @click=\"toggleResolution\">{{comment.is_resolved ? 'Mark unresolved' : 'Resolve'}}</dropdown-item>\n                            <dropdown-item @click=\"initDelete\">Delete</dropdown-item>\n                        </dropdown-menu>\n                    </div>\n                </div>\n\n                <markdown-block :markdown=\"comment.content\" class=\"text-sm\" />\n                <button class=\"link\" @click=\"initReply\"><icon-reply class=\"inline-block\" />Reply</button>\n\n\n                <static-alert variant=\"danger\" v-show=\"showConfirmDelete\" class=\"\">\n                    Continue with delete?\n                    <button-row\n                        size=\"xs\"\n                        submit-text=\"Yes, delete\"\n                        @submitted=\"deleteComment\"\n                        @canceled=\"showConfirmDelete=false\"\n                        submitVariant=\"red\"\n                    ></button-row>\n                </static-alert>\n            </div>\n            <ReviewCommentForm v-else\n                @canceled=\"showEditForm = false\"\n                @saved=\"showEditForm = false\"\n                :comment=\"comment\"\n                :commentManager=\"commentManager\"\n            />\n        </div>\n\n\n        <div class=\"replies ml-1\">\n            <ul v-if=\"showReplyList\">\n                <li v-for=\"reply in replyManager.comments\" :key=\"reply.id\"\n                    class=\"border-l-2 mt-2 px-2 py-1 bg-gray-100 bg-opacity-50\"\n                >\n                    <ReviewComment :comment=\"reply\" :commentManager=\"replyManager\" @deleted=\"handleReplyRemoved\" />\n                </li>\n            </ul>\n            <button class=\"link text-sm\" v-if=\"comment.comments_count > 0\" @click=\"toggleReplies\">\n                {{showReplyList ? 'Hide' : 'Show'}}\n                {{comment.comments_count}}\n                {{comment.comments_count > 1 ? 'replies' : 'reply'}}\n            </button>\n            <div v-show=\"showReplyForm\" class=\"border-l-2 mt-2 px-2 py-1 bg-gray-100 bg-opacity-50\">\n                <strong>Your Reply</strong>\n                <ReviewCommentForm\n                    subjectType=\"App\\Models\\Comment\"\n                    :subjectId=\"comment.id\"\n                    :onlyInternal=\"true\"\n                    :commentManager=\"replyManager\"\n                    @saved=\"handleNewReply\"\n                    @canceled=\"showReplyForm = false\"\n                />\n            </div>\n        </div>\n    </div>\n</template>\n","import script from \"./ReviewComment.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ReviewComment.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\n    import { ref, computed, inject } from 'vue'\n    import ReviewComment from '@/components/expert_panels/ReviewComment.vue'\n    import ReviewCommentForm from './ReviewCommentForm.vue'\n\n    const commentManager = inject('commentManager')\n\n    const props = defineProps({\n        title: {\n            type: String || null,\n            default: null\n        },\n        name: {\n            type: String || null,\n            default: null\n        },\n    });\n\n\n    const showCommentForm = ref(false);\n\n    const showComments = ref(true)\n    const sectionComments = computed(() => {\n        if (!commentManager) {\n            return [];\n        }\n        return commentManager.value.comments.filter(c => {\n            if (c.metadata) {\n                return c.metadata.section == props.name\n            }\n            return false\n        })\n    })\n\n    const countColor = computed(() => {\n        if (!commentManager) {\n            return null;\n        }\n        if (sectionComments.value.find(c => c.type.name == 'required revision')) {\n            return 'yellow'\n        }\n        if (sectionComments.value.find(c => c.type.name == 'suggestion')) {\n            return 'blue'\n        }\n        return 'gray'\n    })\n</script>\n\n<template>\n    <section class=\"lg:flex lg:space-x-4 screen-block\">\n        <div class=\"overflow-x-auto flex-grow\" :class=\"{'lg:w-3/5': showComments}\">\n            <header class=\"flex justify-between items-start space-x-4\">\n                <h2 class=\"flex-grow\" :class=\"{'lg:w-3/5': !showComments}\">{{title}}</h2>\n                <div class=\"flex justify-between items-center lg:w-2/5 px-2 py-1 pb-0 bg-gray-100 rounded-lg\" v-show=\"!showComments\"  v-if=\"commentManager\">\n                    <h3>\n                        <icon-cheveron-right class=\"inline cursor-pointer\" @click=\"showComments = true\"/>\n                        Comments\n                        <badge :color=\"countColor\">{{sectionComments.length}}</badge>\n                    </h3>\n                </div>\n\n            </header>\n            <div>\n                <div>\n                    <slot></slot>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"lg:w-2/5 p-2 bg-gray-100 rounded-lg mb-2\" v-show=\"showComments && commentManager\">\n            <div class=\"flex justify-between items-center\">\n                <h3>\n                    <icon-cheveron-down class=\"inline cursor-pointer\" @click=\"showComments = false\" />\n                    Comments\n                </h3>\n            </div>\n            <ul>\n                <li v-for=\"comment in sectionComments\" :key=\"comment.id\" class=\"bg-white p-2\">\n                    <ReviewComment :comment=\"comment\" :commentManager=\"commentManager\"></ReviewComment>\n                </li>\n            </ul>\n            <div class=\"bg-white mt-2 p-2\">\n                <ReviewCommentForm v-if=\"showCommentForm\"\n                    :section=\"name\"\n                    :commentManager=\"commentManager\"\n                    @saved=\"showCommentForm = false\"\n                    @canceled=\"showCommentForm = false\"\n                />\n                <button v-else class=\"btn btn-xs block\" @click=\"showCommentForm = true\">Add comment</button>\n            </div>\n        </div>\n    </section>\n</template>\n","import script from \"./ReviewSection.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ReviewSection.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\n    import EvidenceSummaryList from '@/components/expert_panels/EvidenceSummaryList.vue'\n    import {computed, watch } from 'vue'\n    import {useStore} from 'vuex'\n    import ReviewSection from '@/components/expert_panels/ReviewSection.vue'\n\n    const store = useStore();\n    const group = computed(() => store.getters['groups/currentItemOrNew'])\n    const expertPanel = computed(() => group.value.expert_panel)\n\n    watch(() => group.value, (to, from) => {\n        if ((to.id && (!from || to.id != from.id))) {\n            store.dispatch('groups/getEvidenceSummaries', group.value);\n        }\n    });\n</script>\n\n<template>\n    <div class=\"application-review p-2 bg-gray-100\">\n            <ReviewSection\n                v-if=\"expertPanel.has_approved_pilot\"\n                title=\"Plans for Ongoing Review and Descrepency Resolution\"\n                name=\"discrepency-review\"\n            >\n                <dictionary-row label=\"Selected protocol\" labelWidthClass=\"w-48 font-bold\">\n                    <div class=\"w-full\">\n                        {{expertPanel.curation_review_protocol ? titleCase(expertPanel.curation_review_protocol.full_name) : null}}\n                        <p v-if=\"expertPanel.curation_review_protocol_id == 100\" class=\"mt-1\">\n                            <em>Details:</em> {{expertPanel.curation_review_protocol_other}}\n                        </p>\n                    </div>\n                </dictionary-row>\n                <dictionary-row label=\"Notes\" labelWidthClass=\"w-48 font-bold\">\n                    <markdown-block :markdown=\"expertPanel.curation_review_process_notes\" />\n                </dictionary-row>\n            </ReviewSection>\n\n            <ReviewSection v-if=\"expertPanel.has_approved_pilot\"\n                title=\"Evidence Summaries\"\n                name=\"evidence-summaries\"\n            >\n                <evidence-summary-list :readonly=\"true\" />\n            </ReviewSection>\n\n            <ReviewSection v-if=\"expertPanel.has_approved_pilot\"\n                title=\"Core Approval Member, Trained Biocurator, and Biocurator Trainer Designation\"\n                name=\"member-designation\"\n            >\n                <dictionary-row label=\"Core Approval Members\" labelWidthClass=\"w-48 font-bold\">\n                    {{this.group.coreApprovalMembers.map(m => m.person.name).join(', ')}}\n                </dictionary-row>\n                <dictionary-row label=\"Biocurator Trainers\" labelWidthClass=\"w-48 font-bold\">\n                    {{this.group.biocuratorTrainers.map(m => m.person.name).join(', ')}}\n                </dictionary-row>\n                <dictionary-row label=\"Trained Biocurators\" labelWidthClass=\"w-48 font-bold\">\n                    {{this.group.trainedBiocurators.map(m => m.person.name).join(', ')}}\n                </dictionary-row>\n            </ReviewSection>\n\n            <div v-if=\"!expertPanel.has_appoved_pilot\" class=\"screen-block\">\n                No approved pilot.\n            </div>\n    </div>\n</template>\n","import script from \"./SustainedCurationReview.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./SustainedCurationReview.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["types","internal","suggestion","requirement","subjectType","subjectId","comments","ref","openComments","computed","value","filter","c","is_resolved","openRequirements","comment_type_id","openSuggestions","commentsForEp","openInternal","findCommentIndex","comment","findIndex","id","getComments","async","commentRepository","where","subject_type","subject_id","addComment","push","removeComment","splice","updateComment","subject","type","BaseEntityForm","constructor","fields","repository","this","repo","currentItem","originalItem","errors","find","then","data","clearErrors","newItem","save","clearCurrentItem","e","isValidationError","response","update","item","destroy","cancel","CommentTypeRepository","BaseRepository","baseUrl","options","super","cachedList","query","params","results","Error","typeRepository","commentTypes","getCommentTypes","items","map","i","label","name","required","queryString","queryStringFromParams","api","transformToEntity","entityClass","Array","isArray","resolve","unresolve","loadPubmed","hasPermission","members","chairs","m","roles","includes","experts","memberGroups","title","delay","ms","Promise","r","setTimeout","getPublications","baseUri","searchUrl","member","last_name","first_name","axios","rsp","pubCount","esearchresult","count","catch","console","log","error","status","watch","props","to","sort","a","b","idx","immediate","__exports__","store","useStore","group","getters","expertPanel","expert_panel","retVal","person","institution","credentials","expertise","join","coi_completed","formatDate","coi_last_completed","basicInfo","toUpperCase","long_base_name","short_base_name","inject","onMounted","formDef","formDefFactory","onlyInternal","typeFieldIdx","f","newComment","get","set","emits","create","metadata","section","commentManager","commentFormFactory","replyManager","commentManagerFactory","showEditForm","showConfirmDelete","getVariant","initDelete","deleteComment","toggleResolution","updatedCmt","showReplyList","toggleReplies","showReplies","showReplyForm","initReply","handleNewReply","newReply","commentClone","comments_count","handleReplyRemoved","canEdit","currentUser","creator_id","showCommentForm","showComments","sectionComments","countColor","from","dispatch"],"sourceRoot":""}