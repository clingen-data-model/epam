{"version":3,"sources":["webpack:///./src/http/is_validation_error.js","webpack:///./src/views/Coi.vue","webpack:///./src/survey.js","webpack:///./src/views/Coi.vue?de94"],"names":["error","response","status","data","errors","class","codeIsValid","title","verifying","coiTitle","saved","epName","$store","getters","isAuthed","redirectCountdown","$router","go","survey","questions","question","key","name","label","question_text","vertical","type","options","option","value","show","show-cancel","storeResponse","saving","Question","this","validationRules","validation","YesNoQuestion","makeQuestion","questionDef","Survey","surveyDefinition","_name","_questions","map","q","rsp","forEach","coi","props","code","required","String","coiDef","getResponseTemplate","computed","methods","verifyCode","api","get","then","dispatch","coiData","setInterval","setTimeout","is_validation_error","mounted","render"],"mappings":"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","file":"js/chunk-0e3fdeff.863b0b77.js","sourcesContent":["export default function (error) {\n    return error.response && error.response.status == 422 && error.response.data.errors\n}","<template>\n    <div>\n        <card :title=\"verifying ? `Loading COI Form` : `COI Form not found`\" v-if=\"!codeIsValid\">\n            <div v-if=\"!verifying\">We couldn't find this COI.</div>\n        </card>\n        <card :title=\"coiTitle\"  class=\"w-3/4 mx-auto relative\" v-if=\"codeIsValid\">\n            <div v-if=\"saved\">\n                Thanks for completing the conflict of interest form for {{epName}}!\n                <small v-if=\"$store.getters.isAuthed\">\n                    <p>You'll be redirected back in {{redirectCountdown}} seconds.</p>\n                    <button @click=\"$router.go(-1)\" class=\"text-blue-500\">Go back</button>\n                </small>\n            </div>\n            <div v-else class=\"relative\">\n                <div \n                    v-for=\"question in survey.questions\"\n                    :key=\"question.name\"\n                >\n                    <transition name=\"slide-fade-down\">\n                        <input-row\n                            :label=\"question.question_text\"\n                            :errors=\"errors[question.name]\"\n                            :vertical=\"true\"\n                            v-show=\"!question.show || (response[question.show.name] == question.show.value)\"\n                        >\n                        \n                            <textarea  v-if=\"question.type == 'text'\"\n                                class=\"w-full h-24\"\n                                v-model=\"response[question.name]\"\n                                :name=\"question.name\"\n                            ></textarea>\n\n                            <div v-if=\"question.type == 'multiple-choice'\">\n                                <label v-for=\"option in question.options\" :key=\"option.value\" class=\"block\">\n                                    <input type=\"radio\" \n                                        :value=\"option.value\" \n                                        :name=\"question.name\"\n                                        v-model=\"response[question.name]\">\n                                    {{option.label}}\n                                </label>\n                            </div>\n\n                            <input \n                                type=\"text\" \n                                v-if=\"question.type == 'string'\"\n                                v-model=\"response[question.name]\"\n                                :name=\"question.name\"\n                            >\n                        </input-row>\n                    </transition>\n                </div>\n                <button-row :show-cancel=\"false\" @submitClicked=\"storeResponse()\">\n                    <slot v-if=\"saving\">\n                        Saving...\n                    </slot>\n                </button-row>\n            </div>\n        </card>\n    </div>\n</template>\n<script>\nimport coiDef from '../../../surveys/coi.json'\nimport Survey from '../survey'\nimport api from '../http/api'\nimport is_validation_error from '../http/is_validation_error';\n\nconst survey = new Survey(coiDef);\n\nexport default {\n    props: {\n        code: {\n            required: true,\n            type: String\n        }\n    },\n    data() {\n        return {\n            coiDef: coiDef,\n            survey: survey,\n            response: survey.getResponseTemplate(),\n            errors: {},\n            epName: null,\n            verifying: false,\n            saved: false,\n            saving: false,\n            redirectCountdown: 5\n        }\n    },\n    computed: {\n        codeIsValid() {\n            return this.epName !== null;\n        },\n        coiTitle() {\n            return survey.name+' for '+this.epName;\n        }\n    },\n    methods: {\n        verifyCode() {\n            this.verifying = true;\n            api.get(`/api/coi/${this.code}/application`)\n                .then(response => {\n                    this.epName = response.data.name\n\n                })\n                .then(() => {\n                    this.verifying = false;\n                })\n        },\n        async storeResponse() {\n            this.saving = true;\n            try {\n                await this.$store.dispatch('storeCoi', {code: this.code, coiData: this.response});\n                this.saved = true;\n                if (this.$store.getters.isAuthed) {\n                    setInterval(() => {this.redirectCountdown--}, 1000)\n                    setTimeout(() => {\n                        this.$router.go(-1)\n                    }, 5000)\n                }\n            } catch (error) {\n                if (is_validation_error(error)) {\n                    this.errors = error.response.data.errors\n                }\n            }\n            this.saving = false;\n        }\n    },\n    mounted() {\n        this.verifyCode();\n    }\n}\n</script>","class Question {\n    constructor(question) {\n        this.question_text = question.question;\n        this.name = question.name;\n        this.options = question.options;\n        this.validationRules = question.validation;\n        this.type = question.type\n        this.show = question.show\n    }\n}\n\nclass YesNoQuestion extends Question {\n    constructor(question) {\n        super(question)\n        this.type = 'multiple-choice';\n        this.options = [\n            {\n                label: 'Yes',\n                value: 1\n            },\n            {\n                label: 'No',\n                value: 0\n            }\n        ];\n    }\n\n    \n}\n\nfunction makeQuestion(questionDef) {\n    if (questionDef.type == 'yes-no') {\n        return new YesNoQuestion(questionDef);\n    }\n\n    return new Question(questionDef);\n}\n\nclass Survey {\n    constructor(surveyDefinition) {\n        this._name = surveyDefinition.name;\n        this._questions = surveyDefinition.questions.map(q => makeQuestion(q));\n\n    }\n\n    get name () {\n        return this._name;\n    }\n\n    get questions() {\n        return this._questions\n    }\n\n    responseIsValid(response) {\n        response;\n        return true;\n    }\n\n    getResponseTemplate() {\n        const rsp = {};\n        this.questions.forEach(q => {\n            rsp[q.name] = null\n        });\n        return rsp;\n        \n    }\n}\n\nexport default Survey","import { render } from \"./Coi.vue?vue&type=template&id=7bac8be2\"\nimport script from \"./Coi.vue?vue&type=script&lang=js\"\nexport * from \"./Coi.vue?vue&type=script&lang=js\"\nscript.render = render\n\nexport default script"],"sourceRoot":""}