{"version":3,"sources":["webpack:///./src/components/log_entries/LogEntryForm.vue","webpack:///./src/components/log_entries/LogEntryForm.vue?ed08","webpack:///./src/adapters/log_entry_repository.js"],"names":["class","ref","$route","meta","title","label","newEntry","log_date","errors","type","application","expert_panel_type_id","step","entry","cancel","save","name","components","StepInput","RichTextEditor","props","id","required","default","data","Date","computed","group","this","expert_panel","watch","immediate","handler","findEntry","syncEntry","methods","logEntries","find","i","initNewEntry","parse","created_at","properties","description","$emit","uuid","response","status","mounted","$el","querySelectorAll","focus","setup","render","_entries","value","fetchEntries","apiUrl","api","get","then","saveEntry","entryData","post","push","updateEntry","put","entryIdx","findIndex","deleteEntry","entryId","delete","splice"],"mappings":"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","file":"js/log-entry-form.cffd5200.js","sourcesContent":["<template>\n    <form-container class=\"log-entry-form\" ref=\"form-container\">\n        <h2 class=\"block-title\">{{this.$route.meta.title}}</h2>\n        <input-row label=\"Log Date\" v-model=\"newEntry.log_date\" :errors=\"errors.log_date\" type=\"date\" ref=\"logdate\"></input-row>\n        <step-input v-model=\"newEntry.step\" :errors=\"errors.step\" v-if=\"application.expert_panel_type_id == 2\"></step-input>\n        <input-row label=\"Entry\" :errors=\"errors.entry\">\n            <rich-text-editor v-model=\"newEntry.entry\"></rich-text-editor>\n        </input-row>\n        <button-row>\n            <button class=\"btn\" @click=\"cancel\">Cancel</button>\n            <button class=\"btn blue\" @click=\"save\">Save</button>\n        </button-row>\n    </form-container>\n</template>\n<script>\nimport {mapGetters} from 'vuex'\nimport { formatDate } from '@/date_utils'\nimport StepInput from '@/components/forms/StepInput'\nimport RichTextEditor from '@/components/forms/RichTextEditor'\nimport {logEntries, saveEntry, updateEntry} from '@/adapters/log_entry_repository'\n\nexport default {\n    name: 'LogEntryForm',\n    components: {\n        StepInput,\n        RichTextEditor\n    },\n    props: {\n        id: {\n            required: false,\n            default: null\n        }\n    },\n    data() {\n        return {\n            newEntry: {\n                log_date: new Date(),\n                step: null,\n                entry: ''\n            },\n            errors: {},\n        }\n    },\n    computed: {\n        ...mapGetters({\n            group: 'groups/currentItemOrNew'\n        }),\n        application () {\n            return this.group.expert_panel;\n        }\n    },\n    watch: {\n        id: {\n            immediate: true,\n            handler: function() {\n                const entry = this.findEntry();\n                if (entry) {\n                    this.syncEntry(entry)\n                }\n            }\n        },\n        application: {\n            immediate: true,\n            handler: function () {\n                const entry = this.findEntry();\n                if (entry) {\n                    this.syncEntry(entry);\n                }\n            }\n        }\n    },\n    methods: {\n        findEntry () {\n            if (this.id === null) {\n                return null;\n            }\n            if (this.logEntries) {\n                return this.logEntries.find(i => i.id == this.id);\n            }\n        },\n        initNewEntry () {\n            this.newEntry = {\n                log_date: formatDate(new Date),\n                step: null,\n                entry: ''\n            }\n        },\n        syncEntry (entry) {\n            if (!entry) {\n                return;\n            }\n            this.newEntry = {\n                id: entry.id,\n                log_date: formatDate(new Date(Date.parse((entry.created_at)))),\n                step: entry.properties.step,\n                entry: entry.description\n            }\n        },\n        cancel() {\n            this.initNewEntry();\n            this.$emit('canceled');\n        },\n        async save() {\n            try {\n                if (this.newEntry.id) {\n                    updateEntry(`/api/groups/${this.group.uuid}/activity-logs/${this.newEntry.id}`, this.newEntry);\n                } else {\n                    saveEntry(`/api/groups/${this.group.uuid}/activity-logs`, this.newEntry)\n                }\n                this.initNewEntry();\n                this.$emit('saved');\n            } catch (error) {\n                if (error.response && error.response.status == 422 && error.response.data.errors) {\n                    this.errors = error.response.data.errors\n                    return;\n                }\n            }\n        },\n    },\n    mounted() {\n        this.$el.querySelectorAll('input')[0].focus();\n    },\n    setup () {\n        return {\n            logEntries\n        }\n    }\n}\n</script>","import { render } from \"./LogEntryForm.vue?vue&type=template&id=4c1d97d7\"\nimport script from \"./LogEntryForm.vue?vue&type=script&lang=js\"\nexport * from \"./LogEntryForm.vue?vue&type=script&lang=js\"\nscript.render = render\n\nexport default script","import {ref, computed} from 'vue';\nimport api from '@/http/api'\n\nconst _entries = ref([]);\n\nexport const logEntries = computed(() => {\n    return _entries.value;\n});\n\nexport const fetchEntries = async (apiUrl) => {\n    _entries.value = await api.get(apiUrl)\n        .then(response => response.data.data);\n}\n\nexport const saveEntry = async (apiUrl, entryData) => {\n    return await api.post(apiUrl, entryData)\n        .then(response => {\n            _entries.value.push(response.data);\n            return response.data\n        });\n}\n\nexport const updateEntry = async (apiUrl, entryData) => {\n    return await api.put(apiUrl, entryData)\n        .then(response => {\n            const entryIdx = _entries.value.findIndex(entry => entry.id == response.data.id);\n            _entries.value[entryIdx] = response.data;\n            return response.data\n        });\n}\n\nexport const deleteEntry = async (apiUrl, entryId) => {\n    return await api.delete(`${apiUrl}/${entryId}`)\n        .then(response => {\n            const entryIdx = _entries.value.findIndex(entry => entry.id == entryId);\n            _entries.value.splice(entryIdx, 1);\n\n            return response;\n        });\n}\n"],"sourceRoot":""}