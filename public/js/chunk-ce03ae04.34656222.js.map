{"version":3,"sources":["webpack:///./src/views/Coi.vue","webpack:///./src/survey.js","webpack:///./src/views/Coi.vue?de94"],"names":["class","codeIsValid","title","verifying","groupMemberId","coiTitle","saved","epName","$store","getters","isAuthed","redirectCountdown","$router","go","survey","questions","question","key","name","label","question_text","errors","vertical","type","response","options","option","value","showQuestion","show-cancel","storeResponse","saving","Question","this","validationRules","validation","show","YesNoQuestion","makeQuestion","questionDef","Survey","surveyDefinition","_name","_questions","map","q","rsp","forEach","coi","props","code","required","String","data","coiDef","getResponseTemplate","computed","membership","currentUser","person","memberships","find","m","group","expert_panel","coi_code","id","methods","Array","isArray","indexOf","verifyCode","api","get","then","dispatch","coiData","countDownToRedirect","is_validation_error","commit","setInterval","setTimeout","mounted","render"],"mappings":"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","file":"js/chunk-ce03ae04.34656222.js","sourcesContent":["<template>\n    <div>\n        <card :title=\"verifying ? `Loading COI Form` : `COI Form not found`\" v-if=\"!codeIsValid\">\n            <div v-if=\"!verifying\">We couldn't find this COI.</div>\n        </card>\n        <card title=\"There's a problem\" v-if=\"!groupMemberId\">\n            We can't see to find your membership id.  Please try refreshing.\n        </card>\n        <card :title=\"coiTitle\"  class=\"max-w-xl mx-auto relative\" v-if=\"codeIsValid\">\n            <div v-if=\"saved\">\n                Thanks for completing the conflict of interest form for {{epName}}!\n                <small v-if=\"$store.getters.isAuthed\">\n                    <p>You'll be redirected back in {{redirectCountdown}} seconds.</p>\n                    <button @click=\"$router.go(-1)\" class=\"text-blue-500\">Go back</button>\n                </small>\n            </div>\n            <div v-else class=\"relative\">\n                <div \n                    v-for=\"question in survey.questions\"\n                    :key=\"question.name\"\n                            :class=\"question.class\"\n                >\n                    <transition name=\"slide-fade-down\">\n                        <input-row\n                            :label=\"question.question_text\"\n                            :errors=\"errors[question.name]\"\n                            :vertical=\"true\"\n                            v-show=\"showQuestion(question)\"\n                        >\n                        \n                            <textarea  v-if=\"question.type == 'text'\"\n                                class=\"w-full h-24\"\n                                v-model=\"response[question.name]\"\n                                :name=\"question.name\"\n                            ></textarea>\n\n                            <div v-if=\"question.type == 'multiple-choice'\">\n                                <label v-for=\"option in question.options\" :key=\"option.value\" class=\"mb-1\">\n                                    <input type=\"radio\" \n                                        :value=\"option.value\" \n                                        :name=\"question.name\"\n                                        v-model=\"response[question.name]\"\n                                    >\n                                    <div>{{option.label}}</div>\n                                </label>\n                            </div>\n\n                            <input \n                                type=\"text\" \n                                v-if=\"question.type == 'string'\"\n                                v-model=\"response[question.name]\"\n                                :name=\"question.name\"\n                            >\n                        </input-row>\n                    </transition>\n                </div>\n                <button-row :show-cancel=\"false\" @submitClicked=\"storeResponse()\">\n                    <slot v-if=\"saving\">\n                        Saving...\n                    </slot>\n                </button-row>\n            </div>\n        </card>\n    </div>\n</template>\n<script>\nimport coiDef from '../../../surveys/coi.json'\nimport Survey from '@/survey'\nimport api from '@/http/api'\nimport is_validation_error from '@/http/is_validation_error';\n\nconst survey = new Survey(coiDef);\n\nexport default {\n    props: {\n        code: {\n            required: true,\n            type: String\n        }\n    },\n    data() {\n        return {\n            coiDef: coiDef,\n            survey: survey,\n            response: survey.getResponseTemplate(),\n            errors: {},\n            epName: null,\n            verifying: false,\n            saved: false,\n            saving: false,\n            redirectCountdown: 5\n        }\n    },\n    computed: {\n        codeIsValid() {\n            return this.epName !== null;\n        },\n        coiTitle() {\n            return survey.name+' for '+this.epName;\n        },\n        groupMemberId() {\n            const membership = this.$store.getters.currentUser.person.memberships.find(m => {\n                return m.group.expert_panel\n                    && m.group.expert_panel.coi_code === this.code\n            });\n\n            if (membership) {\n                return membership.id;\n            }\n\n            return null;\n        }\n    },\n    methods: {\n        showQuestion(question) {\n            if (!question.show) {\n                return true;\n            }\n            if (Array.isArray(question.show.value)) {\n                return question.show.value.indexOf(this.response[question.show.name]) > -1;\n            }\n            return (this.response[question.show.name] == question.show.value);\n        },\n        verifyCode() {\n            this.verifying = true;\n            api.get(`/api/coi/${this.code}/application`)\n                .then(response => {\n                    this.epName = response.data.name\n                })\n                .then(() => {\n                    this.verifying = false;\n                })\n        },\n        async storeResponse() {\n            this.saving = true;\n            try {\n                await this.$store.dispatch(\n                    'storeCoi', \n                    {\n                        code: this.code, \n                        groupMemberId: this.groupMemberId,\n                        coiData: this.response, \n                    }\n                );\n                this.saved = true;\n                this.$store.dispatch('forceGetCurrentUser');\n                if (this.$store.getters.isAuthed) {\n                    this.countDownToRedirect()\n                }\n            } catch (error) {\n                if (is_validation_error(error)) {\n                    this.errors = error.response.data.errors\n                } else {\n                    this.$store.commit('pushError', `You can not complete a COI for ${this.epName} because you are not a member.`)\n                }\n            }\n            this.saving = false;\n        },\n        countDownToRedirect () {\n            setInterval(() => {this.redirectCountdown--}, 1000)\n            setTimeout(() => {\n                this.$router.go(-1)\n            }, 5000)\n        }\n    },\n    async mounted() {\n        this.verifyCode();\n        await this.$store.dispatch('getCurrentUser')\n    }\n}\n</script>","class Question {\n    constructor(question) {\n        this.question_text = question.question;\n        this.name = question.name;\n        this.options = question.options;\n        this.validationRules = question.validation;\n        this.type = question.type;\n        this.show = question.show;\n        this.class = question.class;\n    }\n}\n\nclass YesNoQuestion extends Question {\n    constructor(question) {\n        super(question)\n        this.type = 'multiple-choice';\n        this.options = [{\n                label: 'Yes',\n                value: 1\n            },\n            {\n                label: 'No',\n                value: 0\n            }\n        ];\n    }\n\n\n}\n\nfunction makeQuestion(questionDef) {\n    if (questionDef.type == 'yes-no') {\n        return new YesNoQuestion(questionDef);\n    }\n\n    return new Question(questionDef);\n}\n\nclass Survey {\n    constructor(surveyDefinition) {\n        this._name = surveyDefinition.name;\n        this._questions = surveyDefinition.questions.map(q => makeQuestion(q));\n\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    get questions() {\n        return this._questions\n    }\n\n    responseIsValid(response) {\n        response;\n        return true;\n    }\n\n    getResponseTemplate() {\n        const rsp = {};\n        this.questions.forEach(q => {\n            rsp[q.name] = null\n        });\n        return rsp;\n\n    }\n}\n\nexport default Survey","import { render } from \"./Coi.vue?vue&type=template&id=2d5b4141\"\nimport script from \"./Coi.vue?vue&type=script&lang=js\"\nexport * from \"./Coi.vue?vue&type=script&lang=js\"\nscript.render = render\n\nexport default script"],"sourceRoot":""}