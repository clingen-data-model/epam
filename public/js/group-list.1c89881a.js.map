{"version":3,"sources":["webpack:///./src/components/groups/GroupForm.vue","webpack:///./src/components/groups/GroupForm.vue?8a8f","webpack:///./src/views/groups/GroupList.vue","webpack:///./src/views/groups/GroupList.vue?32f1","webpack:///./src/forms/form_factory.js"],"names":["value","class","canSetType","label","group","group_type_id","groupTypes","type","key","id","fullname","typeDisplayName","name","mode","expert_panel","long_base_name","placeholder","errors","input-class","short_base_name","hasAnyPermission","affiliation_id","affiliationIdPlaceholder","hasPermission","group_status_id","groupStatuses","status","titleCase","parent_id","parents","parent","displayName","emits","data","configs","groups","statuses","newGroup","computed","get","this","$store","getters","set","commit","e","toUpperCase","cdwgs","namesDirty","isDirty","affiliationIdDirty","methods","save","resetErrors","updateGroup","$emit","dispatch","uuid","createGroup","then","response","$router","push","params","attributes","promises","saveGroupData","saveEpData","Promise","all","saveParent","saveName","saveStatus","submitFormData","method","url","affiliationId","attribute","status_id","resetData","cancel","getParentOptions","filter","map","g","beforeMount","setup","props","context","render","startCreateGroup","tabDefinitions","def","filteredGroups","fields","sort","row-click-handler","goToGroup","row-class","cell-displayStatus","item","color","statusColor","displayStatus","cell-coordinators","length","coordinator","idx","to","person","showCreateForm","title","size","$refs","groupForm","ref","components","GroupForm","SubmissionWrapper","isVcep","isGcep","isCdwg","isWg","field","desc","sortable","resolveValue","store","router","goToItem","editing","hideForm","api","is_validation_error"],"mappings":"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","file":"js/group-list.1c89881a.js","sourcesContent":["<template>\n    <div>\n        <input-row label=\"Type\" v-if=\"canSetType\">\n            <select v-model=\"group.group_type_id\" class=\"w-full\">\n                <option :value=\"null\">Select&hellip;</option>\n                <option v-for=\"type in groupTypes\" :key=\"type.id\" :value=\"type.id\">\n                    {{type.fullname}}\n                </option>\n            </select>\n        </input-row>\n        <dictionary-row label=\"Type\" v-else>\n            {{typeDisplayName}}\n        </dictionary-row>\n        \n        <transition name=\"slide-fade-down\" mode=\"out-in\">\n            <div v-if=\"group.group_type_id > 2 && group.expert_panel\">\n                <input-row \n                    label=\"Long Base Name\" \n                    v-model=\"group.expert_panel.long_base_name\" \n                    placeholder=\"Long base name\"\n                    :errors=\"errors.long_base_name\"\n                    input-class=\"w-full\"\n                ></input-row>\n                <input-row \n                    label=\"Short Base Name\" \n                    v-model=\"group.expert_panel.short_base_name\" \n                    placeholder=\"Short base name\"\n                    :errors=\"errors.short_base_name\"\n                    input-class=\"w-full\"\n                ></input-row>\n                <div v-if=\"hasAnyPermission(['groups-manage'])\">\n                    <input-row \n                        label=\"Affiliation ID\" \n                        v-model=\"group.expert_panel.affiliation_id\" \n                        :placeholder=\"affiliationIdPlaceholder\"\n                        :errors=\"errors.affiliation_id\"  \n                        input-class=\"w-full\"\n                    >\n                        <template v-slot:label>\n                            Affiliation ID\n                            <note>admin-only</note>\n                        </template>\n                    </input-row>\n                </div>\n                <dictionary-row label=\"Affiliation ID\" v-else>\n                    <span v-if=\"group.expert_panel.affiliation_id\">{{group.expert_panel.affiliation_id}}</span>\n                    <span v-else class=\"text-gray-400\">{{'Not yet assigend'}}</span>\n                </dictionary-row>\n            </div>\n            <div v-else>\n                <input-row \n                    v-model=\"group.name\" \n                    placeholder=\"Name\" \n                    label=\"Name\" \n                    input-class=\"w-full\"\n                    :errors=\"errors.name\"\n                />\n            </div>\n        </transition>\n        <div v-if=\"hasPermission('groups-manage')\">\n            <input-row :errors=\"errors.group_status_id\">\n                <template v-slot:label>\n                    Status:\n                    <note>admin-only</note>\n                </template>\n                <select v-model=\"group.group_status_id\" class=\"w-full\"\n                    \n                >\n                    <option :value=\"null\"></option>\n                    <option v-for=\"status in groupStatuses\" :key=\"status.id\" :value=\"status.id\">\n                        {{titleCase(status.name)}}\n                    </option>\n                </select>\n            </input-row>\n\n            <input-row :errors=\"errors.parent_id\"  >\n                <template v-slot:label>\n                    Parent group:\n                    <note>admin-only</note>\n                </template>\n                <select v-model=\"group.parent_id\" class=\"w-full\">\n                    <option :value=\"null\">Select...</option>\n                    <option :value=\"0\">None</option>\n                    <option v-for=\"parent in parents\" :key=\"parent.id\" :value=\"parent.id\">\n                        {{parent.displayName}}\n                    </option>\n                </select>\n            </input-row>\n        </div>\n    </div>\n</template>\n<script>\nimport {isValidationError} from '@/http'\nimport {api} from '@/http'\nimport Group from '@/domain/group'\nimport configs from '@/configs'\nimport formFactory from '@/forms/form_factory'\n\nexport default {\n    name: 'GroupForm',\n    emits: [\n        'canceled',\n        'saved'\n    ],\n    data() {\n        return {\n            groupTypes: [\n                {id: 1, fullname: 'Working Group'},\n                {id: 2, fullname: 'Clinical Domain Working Group'},\n                {id: 3, fullname: 'GCEP'},\n                {id: 4, fullname: 'VCEP'},\n            ],\n            groupStatuses: configs.groups.statuses,\n            newGroup: new Group(),\n            parents: []\n        }\n    },\n    computed: {\n        group: {\n            get() {\n                const group = this.$store.getters['groups/currentItem'];\n                if (group) {\n                    return group;\n                }\n                return this.newGroup;\n            },\n            set (value) {\n                try {\n                    this.$store.commit('groups/addItem', value);\n                } catch (e) {\n                    this.newGroup = value;\n                }\n            }\n        },\n        canSetType() {\n            return this.hasPermission('groups-manage') && !this.group.id \n        },\n        typeDisplayName () {\n            if (!this.group.type) {\n                return \"🐇🥚\";\n            }\n            if (this.group.type.name) {\n                return (this.group.type.id < 3) \n                    ? this.group.type.name.toUpperCase() \n                    : this.group.expert_panel.type.name.toUpperCase();\n            }\n            return null;\n        },\n        affiliationIdPlaceholder () {\n            return 50000\n        },\n        cdwgs () {\n            return this.$store.getters['cdwgs/all']\n        },\n        namesDirty () {\n            return this.group.expert_panel.isDirty('long_base_name')\n                || this.group.expert_panel.isDirty('short_base_name');\n        },\n        affiliationIdDirty () {\n            return this.group.expert_panel.isDirty('affiliation_id');\n        }\n    },\n    methods: {\n        async save() {\n            try {\n                this.resetErrors();\n                if (this.group.id) {\n                    await this.updateGroup();\n                    this.$emit('saved');\n\n                    this.$store.dispatch('groups/find', this.group.uuid);\n                    this.$store.commit('pushSuccess', 'Group info updated.');\n                    return;\n                } \n\n                const newGroup = await this.createGroup()\n                                    .then(response => response.data.data);\n                this.$emit('saved');\n                this.$store.commit('pushSuccess', 'Group created.');\n                this.$router.push({name: 'AddMember', params: {uuid: newGroup.uuid}});\n            } catch (error) {\n                if (isValidationError(error)) {\n                    this.errors = error.response.data.errors;\n                }\n            }\n        },\n        createGroup () {\n            let {name, parent_id, group_type_id, group_status_id} = this.group.attributes;\n            if (name === null && this.group.expert_panel) {\n                name = this.group.expert_panel.long_base_name;\n            }\n            return this.$store.dispatch('groups/create', {name, parent_id, group_type_id, group_status_id});\n        },\n        updateGroup () {\n            const promises = [];\n            promises.push(this.saveGroupData());\n            if (this.group.expert_panel) {\n                promises.push(this.saveEpData());\n            }\n            \n            return Promise.all(promises);\n        },\n        saveGroupData () {\n            const promises = [];\n            if (this.group.isDirty('parent_id')) {\n                promises.push(this.saveParent());\n            }\n\n            if (this.group.isDirty('name')) {\n                promises.push(this.saveName())\n            }\n\n            if (this.group.isDirty('group_status_id')) {\n                promises.push(this.saveStatus())\n            }\n\n            return Promise.all(promises);\n        },\n        async saveEpData() {\n            const promises = []\n            if (this.namesDirty) {\n                const {long_base_name, short_base_name} = this.group.expert_panel;\n                promises.push(this.submitFormData({\n                    method: 'put',\n                    url: `/api/groups/${this.group.uuid}/expert-panel/name`, \n                    data: { long_base_name, short_base_name }\n                }));\n            }\n\n            if (this.affiliationIdDirty) {\n                promises.push(this.submitFormData({\n                    method: 'put',\n                    url: `/api/groups/${this.group.uuid}/expert-panel/affiliation-id`, \n                    data: { affiliation_id: this.affiliationId }\n                }));\n            }\n\n            return await Promise.all(promises);\n        },\n\n        isDirty (attribute) {\n            return this.group[attribute] != this.group[attribute]\n        },\n        \n        saveParent () {\n            return this.submitFormData({\n                method: 'put',\n                url: `/api/groups/${this.group.uuid}/parent`, \n                data: { parent_id: this.group.parent_id }\n            })\n        },\n        saveName () {\n            return this.submitFormData({\n                method: 'put',\n                url: `/api/groups/${this.group.uuid}/name`,\n                data: {name: this.group.name}\n            })\n        },\n        saveStatus () {\n            return this.submitFormData({\n                method: 'put',\n                url: `/api/groups/${this.group.uuid}/status`,\n                data: {status_id: this.group.group_status_id}\n            })\n        },\n        resetData () {\n            if (this.group.uuid) {\n                this.$store.dispatch('groups/find', this.group.uuid);\n            }\n        },\n        cancel() {\n            if (this.group.uuid) {\n                this.resetData();\n            }\n            this.$emit('canceled');\n        },\n        async getParentOptions () {\n            this.parents = await api.get(`/api/groups`)\n                        .then(response => {\n                            return response.data\n                                .filter(group => group.id != this.group.id)\n                                .map(g => new Group(g))\n                        });\n        }\n    },\n    beforeMount() {\n        this.getParentOptions();\n        this.$store.dispatch('cdwgs/getAll');\n    },\n    setup (props, context) {\n        const {errors, submitFormData, resetErrors} = formFactory(props, context)\n\n        return {\n            errors,\n            submitFormData,\n            resetErrors\n        }\n    }\n}\n</script>","import { render } from \"./GroupForm.vue?vue&type=template&id=9d140480\"\nimport script from \"./GroupForm.vue?vue&type=script&lang=js\"\nexport * from \"./GroupForm.vue?vue&type=script&lang=js\"\nscript.render = render\n\nexport default script","<template>\n    <div>\n        <h1 class=\"flex justify-between items-center\">\n            Groups\n            <button v-if=\"hasPermission('groups-manage')\" class=\"btn btn-xs\" @click=\"startCreateGroup\">Create a group</button>\n        </h1>\n        <tabs-container>\n            <tab-item v-for=\"def in tabDefinitions\" :label=\"def.label\" :key=\"def.label\">\n                <data-table \n                    :data=\"filteredGroups.filter(def.filter)\" \n                    :fields=\"fields\" \n                    v-model:sort=\"sort\"\n                    :row-click-handler=\"goToGroup\"\n                    v-remaining-height\n                    row-class=\"cursor-pointer active:bg-blue-100\"\n                >\n                    <template v-slot:cell-displayStatus=\"{item}\">\n                        <badge class=\"text-xs\" :color=\"item.statusColor\">{{item.displayStatus}}</badge>\n                    </template>\n                    <template v-slot:cell-coordinators=\"{value}\">\n                        <div v-if=\"value.length == 0\"></div>\n                        <span v-for=\"(coordinator, idx) in value\" :key=\"coordinator.id\">\n                            <span v-if=\"idx > 0\">, </span>\n                            <router-link \n                                :to=\"{name: 'PersonDetail', params: {uuid: coordinator.person.uuid}}\" \n                                class=\"link\"\n                                @click.stop\n                            >\n                                {{coordinator.person.name}}\n                            </router-link>\n                        </span>\n                    </template>\n                </data-table>                \n            </tab-item>\n        </tabs-container>\n\n        <modal-dialog v-model=\"showCreateForm\" title=\"Create a New Group\" size=\"sm\">\n            <submission-wrapper @submitted=\"$refs.groupForm.save()\" @canceled=\"$refs.groupForm.cancel()\">\n                <group-form ref='groupForm' @canceled=\"showCreateForm=false\" @saved=\"showCreateForm = false\"></group-form>\n            </submission-wrapper>\n        </modal-dialog>\n    </div>\n</template>\n<script>\nimport {useStore} from 'vuex'\nimport {useRouter} from 'vue-router'\nimport {computed, onMounted } from 'vue'\nimport GroupForm from '@/components/groups/GroupForm'\nimport SubmissionWrapper from '@/components/groups/SubmissionWrapper'\n\nexport default {\n    name: 'ComponentName',\n    components: {\n        GroupForm,\n        SubmissionWrapper\n    },\n    props: {\n        \n    },\n    data() {\n        return {\n            showCreateForm: false,\n            tabDefinitions:[\n                {\n                    label: 'VCEPs',\n                    filter: g => g.isVcep()\n                },\n                {\n                    label: 'GCEPs',\n                    filter: g => g.isGcep()\n                },\n                {\n                    label: 'CDWGs',\n                    filter: g => g.isCdwg()\n                },\n                {\n                    label: 'WGs',\n                    filter: g => g.isWg()\n                }\n            ],\n            sort: {\n                field: 'id',\n                desc: false\n            },\n            fields: [\n                {\n                    name: 'id',\n                    label: 'ID',\n                    sortable: true\n                },\n                {\n                    name: 'name',\n                    label: 'Name',\n                    sortable: true,\n                    resolveValue: (item) => {\n                        return item.displayName\n                    }\n                },\n                {\n                    name: 'coordinators',\n                    sortable: false\n                },\n                {\n                    name: 'displayStatus',\n                    sortable: true,\n                    label: 'status'\n                },\n            ]\n        }\n    },\n    methods: {\n        startCreateGroup () {\n            this.showCreateForm = true;\n        }\n    },\n    setup() {\n        const store = useStore();\n        const router = useRouter();\n\n        let groups = computed(() => store.getters['groups/all']);\n        let filteredGroups = computed(() => groups.value.filter(() => true))\n        const goToItem = (item) => {\n            router.push({\n                name: 'GroupDetail',\n                params: {uuid: item.uuid}\n            })\n        }\n\n        onMounted(() => {\n            store.dispatch('groups/getItems')\n        })\n        \n        return {\n            groups,\n            filteredGroups,\n            goToItem,\n            goToGroup: goToItem,\n        }\n    }\n\n}\n</script>","import { render } from \"./GroupList.vue?vue&type=template&id=59aa4ca0\"\nimport script from \"./GroupList.vue?vue&type=script&lang=js\"\nexport * from \"./GroupList.vue?vue&type=script&lang=js\"\nscript.render = render\n\nexport default script","import {ref} from 'vue'\nimport is_validation_error from '@/http/is_validation_error'\nimport api from '@/http/api'\n\nexport const errors = ref({});\nconst editing = ref(false);\nconst hideForm = () => {\n    editing.value = false;\n    errors.value = {};\n}\nexport const submitFormData = async ({method, url, data}) => {\n    try {\n        // return await api.put(\n        return await api({\n            method,\n            url, \n            data\n        }).then(response => response.data.data)\n    } catch (error) {\n        if (is_validation_error(error)) {\n            errors.value = {...errors, ...error.response.data.errors}\n        }\n    }\n}\n\nexport const resetErrors = () => {\n    errors.value = {};\n}\n\nexport default () => {\n    return {\n        errors,\n        editing,\n        hideForm,\n        submitFormData,\n        resetErrors,\n    }\n}"],"sourceRoot":""}